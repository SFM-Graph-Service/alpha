{
  "exceptions.create_not_found_error": {
    "name": "create_not_found_error",
    "module": "exceptions",
    "file_path": "core/exceptions.py",
    "line_number": 492,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Create a standardized not found error.",
    "parameters": [
      "entity_type",
      "entity_id"
    ],
    "return_annotation": "SFMNotFoundError"
  },
  "exceptions.create_validation_error": {
    "name": "create_validation_error",
    "module": "exceptions",
    "file_path": "core/exceptions.py",
    "line_number": 497,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Create a standardized validation error.",
    "parameters": [
      "message",
      "field",
      "value"
    ],
    "return_annotation": "SFMValidationError"
  },
  "exceptions.create_node_creation_error": {
    "name": "create_node_creation_error",
    "module": "exceptions",
    "file_path": "core/exceptions.py",
    "line_number": 502,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Create a standardized node creation error.",
    "parameters": [
      "message",
      "node_type",
      "node_id"
    ],
    "return_annotation": "NodeCreationError"
  },
  "exceptions.create_query_error": {
    "name": "create_query_error",
    "module": "exceptions",
    "file_path": "core/exceptions.py",
    "line_number": 511,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Create a standardized query execution error.",
    "parameters": [
      "message",
      "query"
    ],
    "return_annotation": "QueryExecutionError"
  },
  "exceptions.create_database_error": {
    "name": "create_database_error",
    "module": "exceptions",
    "file_path": "core/exceptions.py",
    "line_number": 516,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Create a standardized database connection error.",
    "parameters": [
      "message",
      "database_type"
    ],
    "return_annotation": "DatabaseConnectionError"
  },
  "exceptions.__init__": {
    "name": "__init__",
    "module": "exceptions",
    "file_path": "core/exceptions.py",
    "line_number": 471,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": null,
    "parameters": [
      "self",
      "message",
      "resource",
      "action",
      "context"
    ],
    "return_annotation": null
  },
  "exceptions.to_dict": {
    "name": "to_dict",
    "module": "exceptions",
    "file_path": "core/exceptions.py",
    "line_number": 120,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Convert exception to dictionary for API responses.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "monitoring_middleware.create_monitoring_middleware": {
    "name": "create_monitoring_middleware",
    "module": "monitoring_middleware",
    "file_path": "core/monitoring_middleware.py",
    "line_number": 339,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "\n    Create and configure monitoring middleware for the application.\n    \n    Args:\n        app: ASGI application\n        config: Monitoring configuration\n    \n    Returns:\n        Configured application with monitoring middleware\n    ",
    "parameters": [
      "app",
      "config"
    ],
    "return_annotation": "ASGIApp"
  },
  "monitoring_middleware.__init__": {
    "name": "__init__",
    "module": "monitoring_middleware",
    "file_path": "core/monitoring_middleware.py",
    "line_number": 291,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": null,
    "parameters": [
      "self",
      "app",
      "config"
    ],
    "return_annotation": null
  },
  "monitoring_middleware._record_metrics": {
    "name": "_record_metrics",
    "module": "monitoring_middleware",
    "file_path": "core/monitoring_middleware.py",
    "line_number": 187,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Record request metrics.",
    "parameters": [
      "self",
      "request",
      "response",
      "duration"
    ],
    "return_annotation": null
  },
  "health_checker.create_default_health_checker": {
    "name": "create_default_health_checker",
    "module": "health_checker",
    "file_path": "core/health_checker.py",
    "line_number": 412,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Create a health checker with default checks.",
    "parameters": [],
    "return_annotation": "HealthChecker"
  },
  "health_checker.get_health_checker": {
    "name": "get_health_checker",
    "module": "health_checker",
    "file_path": "core/health_checker.py",
    "line_number": 427,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get the global health checker instance.",
    "parameters": [],
    "return_annotation": "HealthChecker"
  },
  "health_checker.to_dict": {
    "name": "to_dict",
    "module": "health_checker",
    "file_path": "core/health_checker.py",
    "line_number": 65,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Convert to dictionary for JSON serialization.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "health_checker.__init__": {
    "name": "__init__",
    "module": "health_checker",
    "file_path": "core/health_checker.py",
    "line_number": 320,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": null,
    "parameters": [
      "self"
    ],
    "return_annotation": null
  },
  "health_checker.check": {
    "name": "check",
    "module": "health_checker",
    "file_path": "core/health_checker.py",
    "line_number": 82,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Perform the health check.",
    "parameters": [
      "self"
    ],
    "return_annotation": "HealthCheckResult"
  },
  "health_checker._check_health": {
    "name": "_check_health",
    "module": "health_checker",
    "file_path": "core/health_checker.py",
    "line_number": 270,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Check if service is ready to handle requests.",
    "parameters": [
      "self"
    ],
    "return_annotation": "HealthCheckResult"
  },
  "health_checker._timeout_context": {
    "name": "_timeout_context",
    "module": "health_checker",
    "file_path": "core/health_checker.py",
    "line_number": 119,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Context manager for timeout handling.",
    "parameters": [
      "self"
    ],
    "return_annotation": null
  },
  "health_checker.add_check": {
    "name": "add_check",
    "module": "health_checker",
    "file_path": "core/health_checker.py",
    "line_number": 328,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "Add a health check to the system.",
    "parameters": [
      "self",
      "check",
      "include_in_startup",
      "include_in_liveness",
      "include_in_readiness"
    ],
    "return_annotation": null
  },
  "health_checker.remove_check": {
    "name": "remove_check",
    "module": "health_checker",
    "file_path": "core/health_checker.py",
    "line_number": 342,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Remove a health check by name.",
    "parameters": [
      "self",
      "check_name"
    ],
    "return_annotation": null
  },
  "health_checker.check_all": {
    "name": "check_all",
    "module": "health_checker",
    "file_path": "core/health_checker.py",
    "line_number": 350,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Run all health checks and return summary.",
    "parameters": [
      "self"
    ],
    "return_annotation": "HealthSummary"
  },
  "health_checker.check_startup": {
    "name": "check_startup",
    "module": "health_checker",
    "file_path": "core/health_checker.py",
    "line_number": 354,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Run startup health checks.",
    "parameters": [
      "self"
    ],
    "return_annotation": "HealthSummary"
  },
  "health_checker.check_liveness": {
    "name": "check_liveness",
    "module": "health_checker",
    "file_path": "core/health_checker.py",
    "line_number": 358,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Run liveness health checks.",
    "parameters": [
      "self"
    ],
    "return_annotation": "HealthSummary"
  },
  "health_checker.check_readiness": {
    "name": "check_readiness",
    "module": "health_checker",
    "file_path": "core/health_checker.py",
    "line_number": 362,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Run readiness health checks.",
    "parameters": [
      "self"
    ],
    "return_annotation": "HealthSummary"
  },
  "health_checker._run_checks": {
    "name": "_run_checks",
    "module": "health_checker",
    "file_path": "core/health_checker.py",
    "line_number": 366,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Run a list of health checks and return summary.",
    "parameters": [
      "self",
      "checks"
    ],
    "return_annotation": "HealthSummary"
  },
  "health_checker._determine_overall_status": {
    "name": "_determine_overall_status",
    "module": "health_checker",
    "file_path": "core/health_checker.py",
    "line_number": 391,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Determine overall health status from individual check results.",
    "parameters": [
      "self",
      "results"
    ],
    "return_annotation": "HealthStatus"
  },
  "sfm_service.create_sfm_service": {
    "name": "create_sfm_service",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 1896,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Factory function to create SFM service instances.",
    "parameters": [
      "config"
    ],
    "return_annotation": "SFMService"
  },
  "sfm_service.get_sfm_service": {
    "name": "get_sfm_service",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 1901,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get singleton SFM service instance (for dependency injection).",
    "parameters": [],
    "return_annotation": "SFMService"
  },
  "sfm_service.reset_sfm_service": {
    "name": "reset_sfm_service",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 1909,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Reset the singleton service instance (useful for testing).",
    "parameters": [],
    "return_annotation": null
  },
  "sfm_service.quick_analysis": {
    "name": "quick_analysis",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 1918,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "\n    Perform a quick analysis of an SFM graph.\n\n    Args:\n        service: SFM service instance\n\n    Returns:\n        Dictionary containing analysis results\n    ",
    "parameters": [
      "service"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "sfm_service.from_global_config": {
    "name": "from_global_config",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 324,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "Create service config from global configuration.\n        \n        Args:\n            global_config: Global configuration object, or None to load from default\n            \n        Returns:\n            SFMServiceConfig: Service configuration\n        ",
    "parameters": [
      "cls",
      "global_config"
    ],
    "return_annotation": "'SFMServiceConfig'"
  },
  "sfm_service.__init__": {
    "name": "__init__",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 362,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "\n        Initialize the SFM Service.\n\n        Args:\n            config: Service configuration options\n        ",
    "parameters": [
      "self",
      "config"
    ],
    "return_annotation": null
  },
  "sfm_service.query_engine": {
    "name": "query_engine",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 416,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get the query engine, creating it if necessary.",
    "parameters": [
      "self"
    ],
    "return_annotation": "SFMQueryEngine"
  },
  "sfm_service.get_graph": {
    "name": "get_graph",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 424,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get the current SFM graph.",
    "parameters": [
      "self"
    ],
    "return_annotation": "SFMGraph"
  },
  "sfm_service._mark_dirty": {
    "name": "_mark_dirty",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 431,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Mark the cache as dirty after modifications.",
    "parameters": [
      "self",
      "operation"
    ],
    "return_annotation": null
  },
  "sfm_service._validate_graph_size": {
    "name": "_validate_graph_size",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 438,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Validate that the graph hasn't exceeded size limits.",
    "parameters": [
      "self"
    ],
    "return_annotation": null
  },
  "sfm_service._convert_to_resource_type": {
    "name": "_convert_to_resource_type",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 453,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Convert string to ResourceType enum.",
    "parameters": [
      "self",
      "rtype_str"
    ],
    "return_annotation": "ResourceType"
  },
  "sfm_service._convert_to_relationship_kind": {
    "name": "_convert_to_relationship_kind",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 462,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Convert string to RelationshipKind enum.",
    "parameters": [
      "self",
      "kind_str"
    ],
    "return_annotation": "RelationshipKind"
  },
  "sfm_service._node_to_response": {
    "name": "_node_to_response",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 471,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Convert a Node to a NodeResponse.",
    "parameters": [
      "self",
      "node"
    ],
    "return_annotation": "NodeResponse"
  },
  "sfm_service._relationship_to_response": {
    "name": "_relationship_to_response",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 482,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Convert a Relationship to a RelationshipResponse.",
    "parameters": [
      "self",
      "rel"
    ],
    "return_annotation": "RelationshipResponse"
  },
  "sfm_service.get_health": {
    "name": "get_health",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 496,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get service health status with enhanced metrics.",
    "parameters": [
      "self"
    ],
    "return_annotation": "ServiceHealth"
  },
  "sfm_service.create_actor": {
    "name": "create_actor",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 552,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "\n        Create a new Actor entity with security validation.\n\n        Args:\n            request: CreateActorRequest object or dict with actor data\n            **kwargs: Additional arguments for direct Python usage\n\n        Returns:\n            NodeResponse with the created actor data\n        ",
    "parameters": [
      "self",
      "request"
    ],
    "return_annotation": "NodeResponse"
  },
  "sfm_service.create_institution": {
    "name": "create_institution",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 625,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Create a new Institution entity with security validation.",
    "parameters": [
      "self",
      "request"
    ],
    "return_annotation": "NodeResponse"
  },
  "sfm_service.create_policy": {
    "name": "create_policy",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 684,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Create a new Policy entity with security validation.",
    "parameters": [
      "self",
      "request"
    ],
    "return_annotation": "NodeResponse"
  },
  "sfm_service.create_resource": {
    "name": "create_resource",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 744,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Create a new Resource entity with security validation.",
    "parameters": [
      "self",
      "request"
    ],
    "return_annotation": "NodeResponse"
  },
  "sfm_service.create_relationship": {
    "name": "create_relationship",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 807,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "Create a relationship between two entities with referential integrity validation.",
    "parameters": [
      "self",
      "request"
    ],
    "return_annotation": "RelationshipResponse"
  },
  "sfm_service.connect": {
    "name": "connect",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 913,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Convenience method for creating relationships (backward compatibility).",
    "parameters": [
      "self",
      "source_id",
      "target_id",
      "kind",
      "weight"
    ],
    "return_annotation": "RelationshipResponse"
  },
  "sfm_service.get_entity": {
    "name": "get_entity",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 934,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: return\\s+None\\s*$",
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Generic method to retrieve any entity by type and ID.",
    "parameters": [
      "self",
      "entity_type",
      "entity_id"
    ],
    "return_annotation": "Optional[T]"
  },
  "sfm_service.get_actor": {
    "name": "get_actor",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 957,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Retrieve an actor by ID.",
    "parameters": [
      "self",
      "actor_id"
    ],
    "return_annotation": "Optional[Actor]"
  },
  "sfm_service.get_policy": {
    "name": "get_policy",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 961,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Retrieve a policy by ID.",
    "parameters": [
      "self",
      "policy_id"
    ],
    "return_annotation": "Optional[Policy]"
  },
  "sfm_service.get_institution": {
    "name": "get_institution",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 965,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Retrieve an institution by ID.",
    "parameters": [
      "self",
      "institution_id"
    ],
    "return_annotation": "Optional[Institution]"
  },
  "sfm_service.get_resource": {
    "name": "get_resource",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 969,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Retrieve a resource by ID.",
    "parameters": [
      "self",
      "resource_id"
    ],
    "return_annotation": "Optional[Resource]"
  },
  "sfm_service.get_process": {
    "name": "get_process",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 973,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Retrieve a process by ID.",
    "parameters": [
      "self",
      "process_id"
    ],
    "return_annotation": "Optional[Process]"
  },
  "sfm_service.get_flow": {
    "name": "get_flow",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 977,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Retrieve a flow by ID.",
    "parameters": [
      "self",
      "flow_id"
    ],
    "return_annotation": "Optional[Flow]"
  },
  "sfm_service.get_relationship": {
    "name": "get_relationship",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 981,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: return\\s+None\\s*$",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get a relationship by ID.",
    "parameters": [
      "self",
      "rel_id"
    ],
    "return_annotation": "Optional[RelationshipResponse]"
  },
  "sfm_service.get_node_neighbors": {
    "name": "get_node_neighbors",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 1003,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "\n        Get neighboring nodes within specified distance.\n\n        Args:\n            node_id: ID of the node to find neighbors for\n            relationship_kinds: Optional list of relationship kind names to filter by\n            distance: Distance/hops to search (default: 1 for direct neighbors)\n\n        Returns:\n            List of node IDs as strings\n        ",
    "parameters": [
      "self",
      "node_id",
      "relationship_kinds",
      "distance"
    ],
    "return_annotation": "List[str]"
  },
  "sfm_service._get_node_type_mapping": {
    "name": "_get_node_type_mapping",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 1056,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get mapping of string node types to their corresponding classes.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Dict[str, Type[Node]]"
  },
  "sfm_service._apply_pagination": {
    "name": "_apply_pagination",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 1066,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "Apply pagination to a list of items.",
    "parameters": [
      "self",
      "items",
      "limit",
      "offset"
    ],
    "return_annotation": "List[Any]"
  },
  "sfm_service.list_nodes": {
    "name": "list_nodes",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 1072,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "List nodes with optional filtering and pagination.",
    "parameters": [
      "self",
      "node_type",
      "limit",
      "offset"
    ],
    "return_annotation": "List[NodeResponse]"
  },
  "sfm_service.list_relationships": {
    "name": "list_relationships",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 1101,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "List relationships with optional filtering and pagination.",
    "parameters": [
      "self",
      "kind",
      "limit",
      "offset"
    ],
    "return_annotation": "List[RelationshipResponse]"
  },
  "sfm_service._count_nodes_by_type": {
    "name": "_count_nodes_by_type",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 1133,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "\n        Count nodes by their type in the graph.\n\n        Returns:\n            Tuple of (total_nodes, type_counts_dict)\n        ",
    "parameters": [
      "self",
      "graph"
    ],
    "return_annotation": "Tuple[int, Dict[str, int]]"
  },
  "sfm_service._count_relationships_by_kind": {
    "name": "_count_relationships_by_kind",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 1156,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "\n        Count relationships by their kind in the graph.\n\n        Returns:\n            Tuple of (total_relationships, kind_counts_dict)\n        ",
    "parameters": [
      "self",
      "graph"
    ],
    "return_annotation": "Tuple[int, Dict[str, int]]"
  },
  "sfm_service.get_statistics": {
    "name": "get_statistics",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 1181,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get comprehensive statistics about the current graph.",
    "parameters": [
      "self"
    ],
    "return_annotation": "GraphStatistics"
  },
  "sfm_service.analyze_centrality": {
    "name": "analyze_centrality",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 1206,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "Perform centrality analysis on the network.",
    "parameters": [
      "self",
      "centrality_type",
      "limit"
    ],
    "return_annotation": "CentralityAnalysis"
  },
  "sfm_service._validate_and_convert_uuid": {
    "name": "_validate_and_convert_uuid",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 1244,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Validate and convert a string or UUID to a proper UUID object.",
    "parameters": [
      "self",
      "value"
    ],
    "return_annotation": "uuid.UUID"
  },
  "sfm_service._build_policy_impact_analysis": {
    "name": "_build_policy_impact_analysis",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 1253,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "Build PolicyImpactAnalysis from impact data.",
    "parameters": [
      "self",
      "policy_id",
      "impact_data",
      "impact_radius"
    ],
    "return_annotation": "PolicyImpactAnalysis"
  },
  "sfm_service.analyze_policy_impact": {
    "name": "analyze_policy_impact",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 1275,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "Analyze the potential impact of a policy.",
    "parameters": [
      "self",
      "policy_id",
      "impact_radius"
    ],
    "return_annotation": "PolicyImpactAnalysis"
  },
  "sfm_service.find_shortest_path": {
    "name": "find_shortest_path",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 1309,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: return\\s+None\\s*$"
    ],
    "docstring": "\n        Find the shortest path between two nodes.\n\n        Args:\n            source_id: ID of the source node\n            target_id: ID of the target node\n            relationship_kinds: Optional list of relationship kind names to filter by\n\n        Returns:\n            List of node IDs representing the path (including source and target),\n            or None if no path exists\n        ",
    "parameters": [
      "self",
      "source_id",
      "target_id",
      "relationship_kinds"
    ],
    "return_annotation": "Optional[List[str]]"
  },
  "sfm_service.find_shortest_path_legacy": {
    "name": "find_shortest_path_legacy",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 1371,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "\n        Find the shortest path between two nodes by their IDs.\n        Returns a list of node IDs representing the path, or empty list if no path exists.\n        ",
    "parameters": [
      "self",
      "source_id",
      "target_id"
    ],
    "return_annotation": "list"
  },
  "sfm_service.clear_all_data": {
    "name": "clear_all_data",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 1396,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Clear all data from the repository.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "sfm_service.bulk_create_actors": {
    "name": "bulk_create_actors",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 1422,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Create multiple actors in batch with transaction support.",
    "parameters": [
      "self",
      "requests"
    ],
    "return_annotation": "List[NodeResponse]"
  },
  "sfm_service.transaction": {
    "name": "transaction",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 1443,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "\n        Context manager for transactional operations.\n        \n        This provides proper transaction support with rollback capabilities.\n        All operations within the transaction context will be rolled back\n        if an exception occurs.\n        \n        Args:\n            metadata: Optional metadata for the transaction\n            \n        Yields:\n            SFMService: The service instance for chaining operations\n            \n        Example:\n            with service.transaction() as tx_service:\n                actor = tx_service.create_actor(actor_request)\n                policy = tx_service.create_policy(policy_request)\n                tx_service.connect(actor.id, policy.id, \"IMPLEMENTS\")\n                # All operations committed on successful exit\n                # All operations rolled back on exception\n        ",
    "parameters": [
      "self",
      "metadata"
    ],
    "return_annotation": null
  },
  "sfm_service._rollback_create_actor": {
    "name": "_rollback_create_actor",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 1474,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Rollback actor creation by deleting the actor.",
    "parameters": [
      "self",
      "actor_id"
    ],
    "return_annotation": null
  },
  "sfm_service._rollback_create_policy": {
    "name": "_rollback_create_policy",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 1482,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Rollback policy creation by deleting the policy.",
    "parameters": [
      "self",
      "policy_id"
    ],
    "return_annotation": null
  },
  "sfm_service._rollback_create_institution": {
    "name": "_rollback_create_institution",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 1490,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Rollback institution creation by deleting the institution.",
    "parameters": [
      "self",
      "institution_id"
    ],
    "return_annotation": null
  },
  "sfm_service._rollback_create_resource": {
    "name": "_rollback_create_resource",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 1498,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Rollback resource creation by deleting the resource.",
    "parameters": [
      "self",
      "resource_id"
    ],
    "return_annotation": null
  },
  "sfm_service._rollback_create_relationship": {
    "name": "_rollback_create_relationship",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 1506,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Rollback relationship creation by deleting the relationship.",
    "parameters": [
      "self",
      "relationship_id"
    ],
    "return_annotation": null
  },
  "sfm_service._validate_relationship_integrity": {
    "name": "_validate_relationship_integrity",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 1514,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "\n        Validate referential integrity for relationship endpoints.\n        \n        Args:\n            source_id: Source entity UUID\n            target_id: Target entity UUID\n            \n        Returns:\n            True if both entities exist, False otherwise\n        ",
    "parameters": [
      "self",
      "source_id",
      "target_id"
    ],
    "return_annotation": "bool"
  },
  "sfm_service.get_performance_metrics": {
    "name": "get_performance_metrics",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 1558,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get comprehensive performance metrics.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "sfm_service.get_operation_metrics": {
    "name": "get_operation_metrics",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 1562,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get metrics for specific operations or all operations.",
    "parameters": [
      "self",
      "operation_name"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "sfm_service.get_audit_metrics": {
    "name": "get_audit_metrics",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 1568,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get audit logging statistics.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "sfm_service.get_transaction_metrics": {
    "name": "get_transaction_metrics",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 1572,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get transaction management statistics.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "sfm_service.get_system_resource_metrics": {
    "name": "get_system_resource_metrics",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 1576,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get system resource usage metrics.",
    "parameters": [
      "self",
      "limit"
    ],
    "return_annotation": "List[Dict[str, Any]]"
  },
  "sfm_service.get_comprehensive_status": {
    "name": "get_comprehensive_status",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 1580,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get comprehensive service status including all metrics.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "sfm_service.reset_metrics": {
    "name": "reset_metrics",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 1599,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Reset all collected metrics (for testing/maintenance).",
    "parameters": [
      "self"
    ],
    "return_annotation": null
  },
  "sfm_service.undo_last_operation": {
    "name": "undo_last_operation",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 1606,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Undo the last operation using the command pattern.",
    "parameters": [
      "self"
    ],
    "return_annotation": "bool"
  },
  "sfm_service.redo_last_operation": {
    "name": "redo_last_operation",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 1610,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Redo the last undone operation using the command pattern.",
    "parameters": [
      "self"
    ],
    "return_annotation": "bool"
  },
  "sfm_service.get_command_history": {
    "name": "get_command_history",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 1614,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get the command history for undo/redo operations.",
    "parameters": [
      "self"
    ],
    "return_annotation": "List[Dict[str, Any]]"
  },
  "sfm_service.can_undo": {
    "name": "can_undo",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 1631,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Check if there are operations that can be undone.",
    "parameters": [
      "self"
    ],
    "return_annotation": "bool"
  },
  "sfm_service.can_redo": {
    "name": "can_redo",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 1635,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Check if there are operations that can be redone.",
    "parameters": [
      "self"
    ],
    "return_annotation": "bool"
  },
  "sfm_service.get_command_statistics": {
    "name": "get_command_statistics",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 1639,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get statistics about command execution.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "sfm_service.validate_graph_integrity": {
    "name": "validate_graph_integrity",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 1645,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "\n        Validate the integrity of the entire graph and return violations.\n        \n        Returns:\n            List of integrity violations found\n        ",
    "parameters": [
      "self"
    ],
    "return_annotation": "List[Dict[str, Any]]"
  },
  "sfm_service._find_orphaned_relationships": {
    "name": "_find_orphaned_relationships",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 1682,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "\n        Find relationships that reference non-existent entities.\n        \n        Returns:\n            Dictionary of orphaned relationship IDs and their details\n        ",
    "parameters": [
      "self"
    ],
    "return_annotation": "Dict[uuid.UUID, Dict[str, Any]]"
  },
  "sfm_service._entity_exists": {
    "name": "_entity_exists",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 1723,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Check if an entity exists in any repository.",
    "parameters": [
      "self",
      "entity_id"
    ],
    "return_annotation": "bool"
  },
  "sfm_service._check_graph_consistency": {
    "name": "_check_graph_consistency",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 1734,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Check for graph consistency issues.",
    "parameters": [
      "self"
    ],
    "return_annotation": "List[Dict[str, Any]]"
  },
  "sfm_service._check_duplicate_entities": {
    "name": "_check_duplicate_entities",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 1757,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Check for potential duplicate entities.",
    "parameters": [
      "self"
    ],
    "return_annotation": "List[Dict[str, Any]]"
  },
  "sfm_service._check_circular_dependencies": {
    "name": "_check_circular_dependencies",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 1796,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: ^\\s*pass\\s*$",
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Check for circular dependencies that could cause issues.",
    "parameters": [
      "self"
    ],
    "return_annotation": "List[Dict[str, Any]]"
  },
  "sfm_service.repair_orphaned_relationships": {
    "name": "repair_orphaned_relationships",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 1837,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "\n        Repair orphaned relationships by removing them.\n        \n        Args:\n            auto_repair: If True, automatically remove orphaned relationships\n            \n        Returns:\n            Dictionary with repair results\n        ",
    "parameters": [
      "self",
      "auto_repair"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "sfm_service.transaction_wrapper": {
    "name": "transaction_wrapper",
    "module": "sfm_service",
    "file_path": "core/sfm_service.py",
    "line_number": 1466,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": null,
    "parameters": [],
    "return_annotation": null
  },
  "cache_monitoring.monitor_cache_performance": {
    "name": "monitor_cache_performance",
    "module": "cache_monitoring",
    "file_path": "core/cache_monitoring.py",
    "line_number": 206,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Monitor performance across multiple caches.",
    "parameters": [
      "caches"
    ],
    "return_annotation": "Dict[str, CachePerformanceMetrics]"
  },
  "cache_monitoring.generate_cache_report": {
    "name": "generate_cache_report",
    "module": "cache_monitoring",
    "file_path": "core/cache_monitoring.py",
    "line_number": 239,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Generate a comprehensive cache performance report.",
    "parameters": [
      "caches"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "cache_monitoring.to_dict": {
    "name": "to_dict",
    "module": "cache_monitoring",
    "file_path": "core/cache_monitoring.py",
    "line_number": 35,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Convert to dictionary.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Dict[str, float]"
  },
  "cache_monitoring.__init__": {
    "name": "__init__",
    "module": "cache_monitoring",
    "file_path": "core/cache_monitoring.py",
    "line_number": 50,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": null,
    "parameters": [
      "self",
      "cache_name",
      "enable_prometheus"
    ],
    "return_annotation": null
  },
  "cache_monitoring._init_prometheus_metrics": {
    "name": "_init_prometheus_metrics",
    "module": "cache_monitoring",
    "file_path": "core/cache_monitoring.py",
    "line_number": 62,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: ^\\s*return\\s*$",
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Initialize Prometheus metrics.",
    "parameters": [
      "self"
    ],
    "return_annotation": "None"
  },
  "cache_monitoring.record_hit": {
    "name": "record_hit",
    "module": "cache_monitoring",
    "file_path": "core/cache_monitoring.py",
    "line_number": 114,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Record a cache hit.",
    "parameters": [
      "self",
      "cache_type"
    ],
    "return_annotation": "None"
  },
  "cache_monitoring.record_miss": {
    "name": "record_miss",
    "module": "cache_monitoring",
    "file_path": "core/cache_monitoring.py",
    "line_number": 122,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Record a cache miss.",
    "parameters": [
      "self",
      "cache_type"
    ],
    "return_annotation": "None"
  },
  "cache_monitoring.record_eviction": {
    "name": "record_eviction",
    "module": "cache_monitoring",
    "file_path": "core/cache_monitoring.py",
    "line_number": 130,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Record a cache eviction.",
    "parameters": [
      "self",
      "cache_type"
    ],
    "return_annotation": "None"
  },
  "cache_monitoring.record_operation": {
    "name": "record_operation",
    "module": "cache_monitoring",
    "file_path": "core/cache_monitoring.py",
    "line_number": 138,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Record a cache operation.",
    "parameters": [
      "self",
      "operation"
    ],
    "return_annotation": "None"
  },
  "cache_monitoring.update_hit_rate": {
    "name": "update_hit_rate",
    "module": "cache_monitoring",
    "file_path": "core/cache_monitoring.py",
    "line_number": 146,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Update cache hit rate.",
    "parameters": [
      "self",
      "hit_rate",
      "cache_type"
    ],
    "return_annotation": "None"
  },
  "cache_monitoring.update_cache_size": {
    "name": "update_cache_size",
    "module": "cache_monitoring",
    "file_path": "core/cache_monitoring.py",
    "line_number": 154,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Update cache size.",
    "parameters": [
      "self",
      "size_bytes",
      "cache_type"
    ],
    "return_annotation": "None"
  },
  "cache_monitoring.time_operation": {
    "name": "time_operation",
    "module": "cache_monitoring",
    "file_path": "core/cache_monitoring.py",
    "line_number": 163,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Context manager for timing cache operations.",
    "parameters": [
      "self",
      "operation"
    ],
    "return_annotation": null
  },
  "cache_monitoring.get_performance_metrics": {
    "name": "get_performance_metrics",
    "module": "cache_monitoring",
    "file_path": "core/cache_monitoring.py",
    "line_number": 183,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get current performance metrics.",
    "parameters": [
      "self"
    ],
    "return_annotation": "CachePerformanceMetrics"
  },
  "cache_monitoring.get_prometheus_metrics": {
    "name": "get_prometheus_metrics",
    "module": "cache_monitoring",
    "file_path": "core/cache_monitoring.py",
    "line_number": 193,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get Prometheus metrics (if available).",
    "parameters": [
      "self"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "logging_config.monitor_performance": {
    "name": "monitor_performance",
    "module": "logging_config",
    "file_path": "core/logging_config.py",
    "line_number": 200,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "\n    Decorator for automatic performance monitoring and logging.\n    \n    Args:\n        operation_name: Name of the operation being monitored\n    ",
    "parameters": [
      "operation_name"
    ],
    "return_annotation": null
  },
  "logging_config.get_logging_manager": {
    "name": "get_logging_manager",
    "module": "logging_config",
    "file_path": "core/logging_config.py",
    "line_number": 226,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get the global logging manager instance.",
    "parameters": [],
    "return_annotation": "LoggingManager"
  },
  "logging_config.get_logger": {
    "name": "get_logger",
    "module": "logging_config",
    "file_path": "core/logging_config.py",
    "line_number": 146,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get a structured logger instance.",
    "parameters": [
      "self",
      "name",
      "correlation_id"
    ],
    "return_annotation": "SFMLogger"
  },
  "logging_config.configure_logging": {
    "name": "configure_logging",
    "module": "logging_config",
    "file_path": "core/logging_config.py",
    "line_number": 239,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Configure the global logging system.",
    "parameters": [
      "config"
    ],
    "return_annotation": null
  },
  "logging_config.__init__": {
    "name": "__init__",
    "module": "logging_config",
    "file_path": "core/logging_config.py",
    "line_number": 119,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": null,
    "parameters": [
      "self",
      "config"
    ],
    "return_annotation": null
  },
  "logging_config.with_context": {
    "name": "with_context",
    "module": "logging_config",
    "file_path": "core/logging_config.py",
    "line_number": 54,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Create a new logger instance with additional context.",
    "parameters": [
      "self"
    ],
    "return_annotation": "'SFMLogger'"
  },
  "logging_config.info": {
    "name": "info",
    "module": "logging_config",
    "file_path": "core/logging_config.py",
    "line_number": 67,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Log an info message with structured format.",
    "parameters": [
      "self",
      "message"
    ],
    "return_annotation": null
  },
  "logging_config.warning": {
    "name": "warning",
    "module": "logging_config",
    "file_path": "core/logging_config.py",
    "line_number": 71,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Log a warning message with structured format.",
    "parameters": [
      "self",
      "message"
    ],
    "return_annotation": null
  },
  "logging_config.error": {
    "name": "error",
    "module": "logging_config",
    "file_path": "core/logging_config.py",
    "line_number": 75,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Log an error message with structured format.",
    "parameters": [
      "self",
      "message"
    ],
    "return_annotation": null
  },
  "logging_config.debug": {
    "name": "debug",
    "module": "logging_config",
    "file_path": "core/logging_config.py",
    "line_number": 79,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Log a debug message with structured format.",
    "parameters": [
      "self",
      "message"
    ],
    "return_annotation": null
  },
  "logging_config.critical": {
    "name": "critical",
    "module": "logging_config",
    "file_path": "core/logging_config.py",
    "line_number": 83,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Log a critical message with structured format.",
    "parameters": [
      "self",
      "message"
    ],
    "return_annotation": null
  },
  "logging_config._log": {
    "name": "_log",
    "module": "logging_config",
    "file_path": "core/logging_config.py",
    "line_number": 87,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Internal method to format and log messages.",
    "parameters": [
      "self",
      "level",
      "message"
    ],
    "return_annotation": null
  },
  "logging_config._default_config": {
    "name": "_default_config",
    "module": "logging_config",
    "file_path": "core/logging_config.py",
    "line_number": 124,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Default logging configuration.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "logging_config._configure_logging": {
    "name": "_configure_logging",
    "module": "logging_config",
    "file_path": "core/logging_config.py",
    "line_number": 134,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Configure the logging system.",
    "parameters": [
      "self"
    ],
    "return_annotation": null
  },
  "logging_config.operation_context": {
    "name": "operation_context",
    "module": "logging_config",
    "file_path": "core/logging_config.py",
    "line_number": 151,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Context manager for operation logging.",
    "parameters": [
      "self",
      "operation",
      "component"
    ],
    "return_annotation": null
  },
  "logging_config.decorator": {
    "name": "decorator",
    "module": "logging_config",
    "file_path": "core/logging_config.py",
    "line_number": 207,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": null,
    "parameters": [
      "func"
    ],
    "return_annotation": null
  },
  "logging_config.wrapper": {
    "name": "wrapper",
    "module": "logging_config",
    "file_path": "core/logging_config.py",
    "line_number": 209,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": null,
    "parameters": [],
    "return_annotation": null
  },
  "cache_config.to_dict": {
    "name": "to_dict",
    "module": "cache_config",
    "file_path": "core/cache_config.py",
    "line_number": 36,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Convert to dictionary.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "cache_config.__init__": {
    "name": "__init__",
    "module": "cache_config",
    "file_path": "core/cache_config.py",
    "line_number": 75,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": null,
    "parameters": [
      "self",
      "config"
    ],
    "return_annotation": null
  },
  "cache_config.get_layer_config": {
    "name": "get_layer_config",
    "module": "cache_config",
    "file_path": "core/cache_config.py",
    "line_number": 78,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get configuration for a specific cache layer.",
    "parameters": [
      "self",
      "layer_name"
    ],
    "return_annotation": "CacheLayerConfig"
  },
  "cache_config.get_redis_config": {
    "name": "get_redis_config",
    "module": "cache_config",
    "file_path": "core/cache_config.py",
    "line_number": 87,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get Redis configuration.",
    "parameters": [
      "self"
    ],
    "return_annotation": "RedisConfig"
  },
  "cache_config.update_config": {
    "name": "update_config",
    "module": "cache_config",
    "file_path": "core/cache_config.py",
    "line_number": 97,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Update configuration with new values.",
    "parameters": [
      "self",
      "updates"
    ],
    "return_annotation": "None"
  },
  "cache_config.get_config": {
    "name": "get_config",
    "module": "cache_config",
    "file_path": "core/cache_config.py",
    "line_number": 101,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get the full configuration.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "sfm_persistence.save_sfm_graph": {
    "name": "save_sfm_graph",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 1569,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Quick save function for SFM graphs.",
    "parameters": [
      "graph_id",
      "graph",
      "storage_path"
    ],
    "return_annotation": "GraphMetadata"
  },
  "sfm_persistence.load_sfm_graph": {
    "name": "load_sfm_graph",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 1576,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Quick load function for SFM graphs.",
    "parameters": [
      "graph_id",
      "storage_path"
    ],
    "return_annotation": "Optional[SFMGraph]"
  },
  "sfm_persistence.list_sfm_graphs": {
    "name": "list_sfm_graphs",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 1582,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Quick list function for SFM graphs.",
    "parameters": [
      "storage_path"
    ],
    "return_annotation": "List[str]"
  },
  "sfm_persistence.__post_init__": {
    "name": "__post_init__",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 80,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": null,
    "parameters": [
      "self"
    ],
    "return_annotation": null
  },
  "sfm_persistence.node_to_dict": {
    "name": "node_to_dict",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 116,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Convert a Node to dictionary representation.",
    "parameters": [
      "node"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "sfm_persistence._serialize_datetime": {
    "name": "_serialize_datetime",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 137,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Safely serialize datetime objects.",
    "parameters": [
      "dt"
    ],
    "return_annotation": "Optional[str]"
  },
  "sfm_persistence._add_type_specific_fields": {
    "name": "_add_type_specific_fields",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 142,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Add type-specific fields to node dictionary.",
    "parameters": [
      "node",
      "result"
    ],
    "return_annotation": "None"
  },
  "sfm_persistence._handle_actor": {
    "name": "_handle_actor",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 157,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Handle Actor-specific fields.",
    "parameters": [
      "actor",
      "result"
    ],
    "return_annotation": "None"
  },
  "sfm_persistence._handle_institution": {
    "name": "_handle_institution",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 167,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Handle Institution-specific fields.",
    "parameters": [
      "institution",
      "result"
    ],
    "return_annotation": "None"
  },
  "sfm_persistence._handle_resource": {
    "name": "_handle_resource",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 176,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Handle Resource-specific fields.",
    "parameters": [
      "resource",
      "result"
    ],
    "return_annotation": "None"
  },
  "sfm_persistence._handle_policy": {
    "name": "_handle_policy",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 184,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Handle Policy-specific fields.",
    "parameters": [
      "policy",
      "result"
    ],
    "return_annotation": "None"
  },
  "sfm_persistence._handle_flow": {
    "name": "_handle_flow",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 193,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Handle Flow-specific fields.",
    "parameters": [
      "flow",
      "result"
    ],
    "return_annotation": "None"
  },
  "sfm_persistence.dict_to_node": {
    "name": "dict_to_node",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 207,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Convert dictionary representation back to Node.",
    "parameters": [
      "data",
      "node_class"
    ],
    "return_annotation": "Node"
  },
  "sfm_persistence._add_type_specific_kwargs": {
    "name": "_add_type_specific_kwargs",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 226,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "Add type-specific constructor arguments.",
    "parameters": [
      "data",
      "node_class",
      "node_kwargs"
    ],
    "return_annotation": "None"
  },
  "sfm_persistence._add_actor_kwargs": {
    "name": "_add_actor_kwargs",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 242,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Add Actor-specific constructor arguments.",
    "parameters": [
      "data",
      "node_kwargs"
    ],
    "return_annotation": "None"
  },
  "sfm_persistence._add_institution_kwargs": {
    "name": "_add_institution_kwargs",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 250,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Add Institution-specific constructor arguments.",
    "parameters": [
      "data",
      "node_kwargs"
    ],
    "return_annotation": "None"
  },
  "sfm_persistence._add_resource_kwargs": {
    "name": "_add_resource_kwargs",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 256,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Add Resource-specific constructor arguments.",
    "parameters": [
      "data",
      "node_kwargs"
    ],
    "return_annotation": "None"
  },
  "sfm_persistence._add_policy_kwargs": {
    "name": "_add_policy_kwargs",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 265,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Add Policy-specific constructor arguments.",
    "parameters": [
      "data",
      "node_kwargs"
    ],
    "return_annotation": "None"
  },
  "sfm_persistence._add_flow_kwargs": {
    "name": "_add_flow_kwargs",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 273,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Add Flow-specific constructor arguments.",
    "parameters": [
      "data",
      "node_kwargs"
    ],
    "return_annotation": "None"
  },
  "sfm_persistence.serialize_graph": {
    "name": "serialize_graph",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 287,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "Serialize an SFM graph to bytes.",
    "parameters": [
      "graph",
      "format_type"
    ],
    "return_annotation": "bytes"
  },
  "sfm_persistence._serialize_json": {
    "name": "_serialize_json",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 302,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Serialize graph to JSON format.",
    "parameters": [
      "graph",
      "format_type"
    ],
    "return_annotation": "bytes"
  },
  "sfm_persistence._serialize_pickle": {
    "name": "_serialize_pickle",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 314,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Serialize graph to Pickle format.",
    "parameters": [
      "graph",
      "format_type"
    ],
    "return_annotation": "bytes"
  },
  "sfm_persistence.deserialize_graph": {
    "name": "deserialize_graph",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 321,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Deserialize bytes to an SFM graph.",
    "parameters": [
      "data",
      "format_type"
    ],
    "return_annotation": "SFMGraph"
  },
  "sfm_persistence._dict_to_graph": {
    "name": "_dict_to_graph",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 353,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Convert dictionary representation back to SFMGraph.",
    "parameters": [
      "data"
    ],
    "return_annotation": "SFMGraph"
  },
  "sfm_persistence._dict_to_relationship": {
    "name": "_dict_to_relationship",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 432,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Convert dictionary representation back to Relationship.",
    "parameters": [
      "data"
    ],
    "return_annotation": "Relationship"
  },
  "sfm_persistence.json_serializer": {
    "name": "json_serializer",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 451,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Custom JSON serializer for complex types.",
    "parameters": [
      "obj"
    ],
    "return_annotation": "str"
  },
  "sfm_persistence._graph_to_dict": {
    "name": "_graph_to_dict",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 462,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Convert SFMGraph to dictionary representation.",
    "parameters": [
      "graph"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "sfm_persistence._relationship_to_dict": {
    "name": "_relationship_to_dict",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 504,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Convert Relationship to dictionary representation.",
    "parameters": [
      "rel"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "sfm_persistence.__init__": {
    "name": "__init__",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 572,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "\n        Initialize the persistence manager.\n\n        Args:\n            config: Configuration object, path string, or None for defaults\n        ",
    "parameters": [
      "self",
      "config"
    ],
    "return_annotation": null
  },
  "sfm_persistence.initialize_directories": {
    "name": "initialize_directories",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 530,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Create necessary directory structure.",
    "parameters": [
      "self"
    ],
    "return_annotation": null
  },
  "sfm_persistence.get_graph_file_path": {
    "name": "get_graph_file_path",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 536,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get file path for graph data.",
    "parameters": [
      "self",
      "graph_id",
      "format_type"
    ],
    "return_annotation": "Path"
  },
  "sfm_persistence.get_version_file_path": {
    "name": "get_version_file_path",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 547,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "Get file path for versioned graph data.",
    "parameters": [
      "self",
      "graph_id",
      "version",
      "format_type"
    ],
    "return_annotation": "Path"
  },
  "sfm_persistence.get_metadata_file_path": {
    "name": "get_metadata_file_path",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 559,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get file path for metadata.",
    "parameters": [
      "self",
      "graph_id"
    ],
    "return_annotation": "Path"
  },
  "sfm_persistence._initialize_config": {
    "name": "_initialize_config",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 591,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "Initialize configuration from various input types.",
    "parameters": [
      "self",
      "config"
    ],
    "return_annotation": "PersistenceConfig"
  },
  "sfm_persistence._thread_safe": {
    "name": "_thread_safe",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 602,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Context manager for thread-safe operations.",
    "parameters": [
      "self"
    ],
    "return_annotation": null
  },
  "sfm_persistence.save_graph": {
    "name": "save_graph",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 610,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "\n        Save an SFM graph to persistent storage.\n\n        Args:\n            graph_id: Unique identifier for the graph\n            graph: SFMGraph instance to save\n            metadata: Optional metadata dictionary\n            format_type: Storage format (defaults to config default)\n\n        Returns:\n            GraphMetadata for the saved graph\n        ",
    "parameters": [
      "self",
      "graph_id",
      "graph",
      "metadata",
      "format_type"
    ],
    "return_annotation": "GraphMetadata"
  },
  "sfm_persistence._create_metadata": {
    "name": "_create_metadata",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 660,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "Create metadata object for saved graph.",
    "parameters": [
      "self",
      "graph_id",
      "graph",
      "version",
      "current_metadata",
      "metadata",
      "serialized_data",
      "checksum",
      "format_type"
    ],
    "return_annotation": "GraphMetadata"
  },
  "sfm_persistence._save_graph_data": {
    "name": "_save_graph_data",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 681,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "Save serialized graph data to file.",
    "parameters": [
      "self",
      "graph_id",
      "serialized_data",
      "format_type"
    ],
    "return_annotation": "None"
  },
  "sfm_persistence.load_graph": {
    "name": "load_graph",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 687,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: return\\s+None\\s*$"
    ],
    "docstring": "\n        Load an SFM graph from persistent storage.\n\n        Args:\n            graph_id: Unique identifier for the graph\n            version: Specific version to load (latest if None)\n\n        Returns:\n            SFMGraph instance or None if not found\n        ",
    "parameters": [
      "self",
      "graph_id",
      "version"
    ],
    "return_annotation": "Optional[SFMGraph]"
  },
  "sfm_persistence._verify_checksum": {
    "name": "_verify_checksum",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 745,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "Verify data integrity using checksum.",
    "parameters": [
      "self",
      "serialized_data",
      "metadata",
      "graph_id"
    ],
    "return_annotation": "None"
  },
  "sfm_persistence.delete_graph": {
    "name": "delete_graph",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 754,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "\n        Delete a graph and optionally its versions.\n\n        Args:\n            graph_id: Unique identifier for the graph\n            include_versions: Whether to delete all versions\n\n        Returns:\n            True if successful, False otherwise\n        ",
    "parameters": [
      "self",
      "graph_id",
      "include_versions"
    ],
    "return_annotation": "bool"
  },
  "sfm_persistence.list_graphs": {
    "name": "list_graphs",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 798,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "\n        List all stored graphs.\n\n        Args:\n            include_metadata: Whether to return metadata objects or just IDs\n\n        Returns:\n            List of graph IDs or GraphMetadata objects\n        ",
    "parameters": [
      "self",
      "include_metadata"
    ],
    "return_annotation": "Sequence[Union[str, GraphMetadata]]"
  },
  "sfm_persistence.get_graph_metadata": {
    "name": "get_graph_metadata",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 834,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get metadata for a specific graph.",
    "parameters": [
      "self",
      "graph_id"
    ],
    "return_annotation": "Optional[GraphMetadata]"
  },
  "sfm_persistence.get_storage_statistics": {
    "name": "get_storage_statistics",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 838,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get storage statistics.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "sfm_persistence._initialize_stats": {
    "name": "_initialize_stats",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 857,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Initialize statistics dictionary.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "sfm_persistence._calculate_graph_stats": {
    "name": "_calculate_graph_stats",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 870,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "Calculate statistics for graphs.",
    "parameters": [
      "self",
      "graphs",
      "stats"
    ],
    "return_annotation": "None"
  },
  "sfm_persistence._count_backups": {
    "name": "_count_backups",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 908,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: ^\\s*return\\s*$",
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Count backup files with size calculation, validation, and age tracking.",
    "parameters": [
      "self",
      "stats"
    ],
    "return_annotation": "None"
  },
  "sfm_persistence._get_metadata": {
    "name": "_get_metadata",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 977,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: return\\s+None\\s*$"
    ],
    "docstring": "Load metadata for a graph with enhanced validation and error handling.",
    "parameters": [
      "self",
      "graph_id",
      "version"
    ],
    "return_annotation": "Optional[GraphMetadata]"
  },
  "sfm_persistence._validate_metadata_consistency": {
    "name": "_validate_metadata_consistency",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 1031,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Validate that cached metadata is still consistent with stored files.",
    "parameters": [
      "self",
      "metadata"
    ],
    "return_annotation": "bool"
  },
  "sfm_persistence._validate_metadata_structure": {
    "name": "_validate_metadata_structure",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 1057,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Validate that metadata has required fields and structure.",
    "parameters": [
      "self",
      "metadata_data"
    ],
    "return_annotation": "bool"
  },
  "sfm_persistence._validate_parsed_metadata": {
    "name": "_validate_parsed_metadata",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 1081,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "Validate parsed metadata object.",
    "parameters": [
      "self",
      "metadata",
      "graph_id",
      "version"
    ],
    "return_annotation": "bool"
  },
  "sfm_persistence._load_metadata_data": {
    "name": "_load_metadata_data",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 1109,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: return\\s+None\\s*$"
    ],
    "docstring": "Load raw metadata data from file.",
    "parameters": [
      "self",
      "graph_id",
      "version"
    ],
    "return_annotation": "Optional[Dict[str, Any]]"
  },
  "sfm_persistence._parse_metadata": {
    "name": "_parse_metadata",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 1126,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Parse metadata dictionary into GraphMetadata object.",
    "parameters": [
      "self",
      "metadata_data"
    ],
    "return_annotation": "GraphMetadata"
  },
  "sfm_persistence._save_metadata": {
    "name": "_save_metadata",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 1138,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Save metadata for a graph.",
    "parameters": [
      "self",
      "graph_id",
      "metadata"
    ],
    "return_annotation": "None"
  },
  "sfm_persistence._archive_version": {
    "name": "_archive_version",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 1154,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Archive current version before updating.",
    "parameters": [
      "self",
      "graph_id",
      "metadata"
    ],
    "return_annotation": "None"
  },
  "sfm_persistence._validate_graph": {
    "name": "_validate_graph",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 1184,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Validate graph integrity with enhanced corruption detection.",
    "parameters": [
      "self",
      "graph"
    ],
    "return_annotation": "None"
  },
  "sfm_persistence._check_graph_structure_integrity": {
    "name": "_check_graph_structure_integrity",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 1261,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Perform additional graph structure integrity checks.",
    "parameters": [
      "self",
      "graph",
      "all_node_ids"
    ],
    "return_annotation": "None"
  },
  "sfm_persistence._count_nodes": {
    "name": "_count_nodes",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 1280,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Count total nodes in graph.",
    "parameters": [
      "self",
      "graph"
    ],
    "return_annotation": "int"
  },
  "sfm_persistence.get_version_history": {
    "name": "get_version_history",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 1289,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get version history for a graph.",
    "parameters": [
      "self",
      "graph_id"
    ],
    "return_annotation": "List[Dict[str, Any]]"
  },
  "sfm_persistence.create_backup": {
    "name": "create_backup",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 1307,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Create a backup of a specific graph.",
    "parameters": [
      "self",
      "graph_id",
      "backup_name"
    ],
    "return_annotation": "str"
  },
  "sfm_persistence.restore_from_backup": {
    "name": "restore_from_backup",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 1339,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Restore a graph from backup.",
    "parameters": [
      "self",
      "backup_path",
      "new_graph_id"
    ],
    "return_annotation": "str"
  },
  "sfm_persistence.check_version_consistency": {
    "name": "check_version_consistency",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 1391,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Check version consistency for a graph across all storage locations.",
    "parameters": [
      "self",
      "graph_id"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "sfm_persistence.cleanup_old_versions": {
    "name": "cleanup_old_versions",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 1457,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Clean up old versions of a graph, keeping the specified number of recent versions.",
    "parameters": [
      "self",
      "graph_id",
      "keep_versions"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "sfm_persistence.cleanup_old_backups": {
    "name": "cleanup_old_backups",
    "module": "sfm_persistence",
    "file_path": "core/sfm_persistence.py",
    "line_number": 1524,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Clean up old backup files older than specified age.",
    "parameters": [
      "self",
      "max_age_days"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "advanced_caching.cached": {
    "name": "cached",
    "module": "advanced_caching",
    "file_path": "core/advanced_caching.py",
    "line_number": 721,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Enhanced cache decorator with configurable options.\n\n    Args:\n        ttl: Time to live for cached values in seconds\n        cache_key_func: Custom function to generate cache keys\n        invalidate_on: List of invalidation events (reserved for future use)\n        cache_instance: Cache instance to use for storage\n    ",
    "parameters": [
      "ttl",
      "cache_key_func",
      "invalidate_on",
      "cache_instance"
    ],
    "return_annotation": "Callable[[F], F]"
  },
  "advanced_caching.create_cache_manager": {
    "name": "create_cache_manager",
    "module": "advanced_caching",
    "file_path": "core/advanced_caching.py",
    "line_number": 795,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Factory function to create configured cache manager.",
    "parameters": [
      "config"
    ],
    "return_annotation": "QueryCache"
  },
  "advanced_caching.cached_operation": {
    "name": "cached_operation",
    "module": "advanced_caching",
    "file_path": "core/advanced_caching.py",
    "line_number": 819,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Decorator to automatically cache operation results.",
    "parameters": [
      "cache",
      "operation_name",
      "ttl"
    ],
    "return_annotation": "Callable[[F], F]"
  },
  "advanced_caching.record_hit": {
    "name": "record_hit",
    "module": "advanced_caching",
    "file_path": "core/advanced_caching.py",
    "line_number": 675,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Record a cache hit.",
    "parameters": [
      "self",
      "cache_name",
      "cache_type"
    ],
    "return_annotation": "None"
  },
  "advanced_caching.record_miss": {
    "name": "record_miss",
    "module": "advanced_caching",
    "file_path": "core/advanced_caching.py",
    "line_number": 680,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Record a cache miss.",
    "parameters": [
      "self",
      "cache_name",
      "cache_type"
    ],
    "return_annotation": "None"
  },
  "advanced_caching.record_expired": {
    "name": "record_expired",
    "module": "advanced_caching",
    "file_path": "core/advanced_caching.py",
    "line_number": 88,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Record a cache expiration.",
    "parameters": [
      "self"
    ],
    "return_annotation": null
  },
  "advanced_caching.record_evicted": {
    "name": "record_evicted",
    "module": "advanced_caching",
    "file_path": "core/advanced_caching.py",
    "line_number": 92,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Record a cache eviction.",
    "parameters": [
      "self"
    ],
    "return_annotation": null
  },
  "advanced_caching._update_hit_rate": {
    "name": "_update_hit_rate",
    "module": "advanced_caching",
    "file_path": "core/advanced_caching.py",
    "line_number": 96,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Update the hit rate calculation.",
    "parameters": [
      "self"
    ],
    "return_annotation": null
  },
  "advanced_caching.to_dict": {
    "name": "to_dict",
    "module": "advanced_caching",
    "file_path": "core/advanced_caching.py",
    "line_number": 101,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Convert stats to dictionary.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "advanced_caching.__init__": {
    "name": "__init__",
    "module": "advanced_caching",
    "file_path": "core/advanced_caching.py",
    "line_number": 647,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": null,
    "parameters": [
      "self",
      "enabled"
    ],
    "return_annotation": null
  },
  "advanced_caching.get": {
    "name": "get",
    "module": "advanced_caching",
    "file_path": "core/advanced_caching.py",
    "line_number": 423,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: return\\s+None\\s*$",
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get value with cache level promotion.",
    "parameters": [
      "self",
      "key"
    ],
    "return_annotation": "Optional[Any]"
  },
  "advanced_caching.set": {
    "name": "set",
    "module": "advanced_caching",
    "file_path": "core/advanced_caching.py",
    "line_number": 435,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Set value in all cache levels.",
    "parameters": [
      "self",
      "key",
      "value",
      "ttl"
    ],
    "return_annotation": "None"
  },
  "advanced_caching.delete": {
    "name": "delete",
    "module": "advanced_caching",
    "file_path": "core/advanced_caching.py",
    "line_number": 441,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Delete from all cache levels.",
    "parameters": [
      "self",
      "key"
    ],
    "return_annotation": "bool"
  },
  "advanced_caching.clear": {
    "name": "clear",
    "module": "advanced_caching",
    "file_path": "core/advanced_caching.py",
    "line_number": 556,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Clear all cached data.",
    "parameters": [
      "self"
    ],
    "return_annotation": "None"
  },
  "advanced_caching.keys": {
    "name": "keys",
    "module": "advanced_caching",
    "file_path": "core/advanced_caching.py",
    "line_number": 384,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": null,
    "parameters": [
      "self"
    ],
    "return_annotation": "List[str]"
  },
  "advanced_caching.delete_pattern": {
    "name": "delete_pattern",
    "module": "advanced_caching",
    "file_path": "core/advanced_caching.py",
    "line_number": 450,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Delete pattern from all cache levels.",
    "parameters": [
      "self",
      "pattern"
    ],
    "return_annotation": "int"
  },
  "advanced_caching._matches_pattern": {
    "name": "_matches_pattern",
    "module": "advanced_caching",
    "file_path": "core/advanced_caching.py",
    "line_number": 161,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Simple pattern matching for cache keys.",
    "parameters": [
      "self",
      "key",
      "pattern"
    ],
    "return_annotation": "bool"
  },
  "advanced_caching.get_stats": {
    "name": "get_stats",
    "module": "advanced_caching",
    "file_path": "core/advanced_caching.py",
    "line_number": 549,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get cache statistics.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "advanced_caching._make_key": {
    "name": "_make_key",
    "module": "advanced_caching",
    "file_path": "core/advanced_caching.py",
    "line_number": 333,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Create a namespaced key for this cache instance.",
    "parameters": [
      "self",
      "key"
    ],
    "return_annotation": "str"
  },
  "advanced_caching.add_level": {
    "name": "add_level",
    "module": "advanced_caching",
    "file_path": "core/advanced_caching.py",
    "line_number": 418,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Add a cache level (first added = highest priority).",
    "parameters": [
      "self",
      "cache"
    ],
    "return_annotation": "None"
  },
  "advanced_caching.register_invalidation_rule": {
    "name": "register_invalidation_rule",
    "module": "advanced_caching",
    "file_path": "core/advanced_caching.py",
    "line_number": 492,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Register cache invalidation rules for specific events.",
    "parameters": [
      "self",
      "event",
      "cache_patterns"
    ],
    "return_annotation": "None"
  },
  "advanced_caching.register_key_generator": {
    "name": "register_key_generator",
    "module": "advanced_caching",
    "file_path": "core/advanced_caching.py",
    "line_number": 496,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Register a cache key generator for an operation.",
    "parameters": [
      "self",
      "operation",
      "generator"
    ],
    "return_annotation": "None"
  },
  "advanced_caching.get_cached_result": {
    "name": "get_cached_result",
    "module": "advanced_caching",
    "file_path": "core/advanced_caching.py",
    "line_number": 500,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get cached result for an operation.",
    "parameters": [
      "self",
      "operation"
    ],
    "return_annotation": "Optional[Any]"
  },
  "advanced_caching.cache_result": {
    "name": "cache_result",
    "module": "advanced_caching",
    "file_path": "core/advanced_caching.py",
    "line_number": 505,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "Cache a result for an operation.",
    "parameters": [
      "self",
      "operation",
      "result"
    ],
    "return_annotation": "None"
  },
  "advanced_caching.invalidate_on_event": {
    "name": "invalidate_on_event",
    "module": "advanced_caching",
    "file_path": "core/advanced_caching.py",
    "line_number": 511,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Invalidate caches when specific events occur.",
    "parameters": [
      "self",
      "event"
    ],
    "return_annotation": "int"
  },
  "advanced_caching._generate_cache_key": {
    "name": "_generate_cache_key",
    "module": "advanced_caching",
    "file_path": "core/advanced_caching.py",
    "line_number": 525,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Generate a cache key for an operation.",
    "parameters": [
      "self",
      "operation"
    ],
    "return_annotation": "str"
  },
  "advanced_caching.register_warming_strategy": {
    "name": "register_warming_strategy",
    "module": "advanced_caching",
    "file_path": "core/advanced_caching.py",
    "line_number": 570,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Register a cache warming strategy.",
    "parameters": [
      "self",
      "name",
      "strategy"
    ],
    "return_annotation": "None"
  },
  "advanced_caching.warm_cache": {
    "name": "warm_cache",
    "module": "advanced_caching",
    "file_path": "core/advanced_caching.py",
    "line_number": 575,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Warm cache using specified strategy or all strategies.",
    "parameters": [
      "self",
      "strategy_name"
    ],
    "return_annotation": "None"
  },
  "advanced_caching.warm_frequently_accessed_nodes": {
    "name": "warm_frequently_accessed_nodes",
    "module": "advanced_caching",
    "file_path": "core/advanced_caching.py",
    "line_number": 596,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: ^\\s*return\\s*$",
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Warm cache for frequently accessed nodes.",
    "parameters": [
      "self",
      "node_ids"
    ],
    "return_annotation": "None"
  },
  "advanced_caching.warm_common_queries": {
    "name": "warm_common_queries",
    "module": "advanced_caching",
    "file_path": "core/advanced_caching.py",
    "line_number": 615,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: ^\\s*return\\s*$",
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Warm cache for common query patterns.",
    "parameters": [
      "self"
    ],
    "return_annotation": "None"
  },
  "advanced_caching.schedule_warming": {
    "name": "schedule_warming",
    "module": "advanced_caching",
    "file_path": "core/advanced_caching.py",
    "line_number": 632,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Schedule periodic cache warming.",
    "parameters": [
      "self",
      "interval_seconds"
    ],
    "return_annotation": "None"
  },
  "advanced_caching.record_eviction": {
    "name": "record_eviction",
    "module": "advanced_caching",
    "file_path": "core/advanced_caching.py",
    "line_number": 685,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Record a cache eviction.",
    "parameters": [
      "self",
      "cache_name",
      "cache_type"
    ],
    "return_annotation": "None"
  },
  "advanced_caching.update_hit_rate": {
    "name": "update_hit_rate",
    "module": "advanced_caching",
    "file_path": "core/advanced_caching.py",
    "line_number": 690,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Update cache hit rate.",
    "parameters": [
      "self",
      "cache_name",
      "cache_type",
      "hit_rate"
    ],
    "return_annotation": "None"
  },
  "advanced_caching.update_size": {
    "name": "update_size",
    "module": "advanced_caching",
    "file_path": "core/advanced_caching.py",
    "line_number": 695,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Update cache size.",
    "parameters": [
      "self",
      "cache_name",
      "cache_type",
      "size_bytes"
    ],
    "return_annotation": "None"
  },
  "advanced_caching.record_operation": {
    "name": "record_operation",
    "module": "advanced_caching",
    "file_path": "core/advanced_caching.py",
    "line_number": 700,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Record a cache operation.",
    "parameters": [
      "self",
      "operation",
      "cache_name"
    ],
    "return_annotation": "None"
  },
  "advanced_caching.time_operation": {
    "name": "time_operation",
    "module": "advanced_caching",
    "file_path": "core/advanced_caching.py",
    "line_number": 705,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Context manager for timing cache operations.",
    "parameters": [
      "self",
      "cache_name",
      "operation"
    ],
    "return_annotation": null
  },
  "advanced_caching.decorator": {
    "name": "decorator",
    "module": "advanced_caching",
    "file_path": "core/advanced_caching.py",
    "line_number": 822,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": null,
    "parameters": [
      "func"
    ],
    "return_annotation": "F"
  },
  "advanced_caching.from_dict": {
    "name": "from_dict",
    "module": "advanced_caching",
    "file_path": "core/advanced_caching.py",
    "line_number": 790,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Create config from dictionary.",
    "parameters": [
      "cls",
      "config_dict"
    ],
    "return_annotation": "'CacheConfig'"
  },
  "advanced_caching.is_expired": {
    "name": "is_expired",
    "module": "advanced_caching",
    "file_path": "core/advanced_caching.py",
    "line_number": 234,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": null,
    "parameters": [
      "self"
    ],
    "return_annotation": "bool"
  },
  "advanced_caching._warming_loop": {
    "name": "_warming_loop",
    "module": "advanced_caching",
    "file_path": "core/advanced_caching.py",
    "line_number": 634,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": null,
    "parameters": [],
    "return_annotation": null
  },
  "advanced_caching.wrapper": {
    "name": "wrapper",
    "module": "advanced_caching",
    "file_path": "core/advanced_caching.py",
    "line_number": 824,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": null,
    "parameters": [],
    "return_annotation": "Any"
  },
  "advanced_caching._invalidate_cache": {
    "name": "_invalidate_cache",
    "module": "advanced_caching",
    "file_path": "core/advanced_caching.py",
    "line_number": 764,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": null,
    "parameters": [],
    "return_annotation": null
  },
  "performance_metrics.get_metrics_collector": {
    "name": "get_metrics_collector",
    "module": "performance_metrics",
    "file_path": "core/performance_metrics.py",
    "line_number": 291,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get the global metrics collector.",
    "parameters": [],
    "return_annotation": "MetricsCollector"
  },
  "performance_metrics.record_operation_time": {
    "name": "record_operation_time",
    "module": "performance_metrics",
    "file_path": "core/performance_metrics.py",
    "line_number": 296,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "Record operation timing using the global collector.",
    "parameters": [
      "operation_name",
      "duration",
      "success",
      "metadata"
    ],
    "return_annotation": null
  },
  "performance_metrics.increment_counter": {
    "name": "increment_counter",
    "module": "performance_metrics",
    "file_path": "core/performance_metrics.py",
    "line_number": 176,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: ^\\s*return\\s*$"
    ],
    "docstring": "Increment a counter metric.",
    "parameters": [
      "self",
      "counter_name",
      "value",
      "metadata"
    ],
    "return_annotation": null
  },
  "performance_metrics.set_gauge": {
    "name": "set_gauge",
    "module": "performance_metrics",
    "file_path": "core/performance_metrics.py",
    "line_number": 189,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: ^\\s*return\\s*$"
    ],
    "docstring": "Set a gauge metric value.",
    "parameters": [
      "self",
      "gauge_name",
      "value",
      "metadata"
    ],
    "return_annotation": null
  },
  "performance_metrics.get_performance_summary": {
    "name": "get_performance_summary",
    "module": "performance_metrics",
    "file_path": "core/performance_metrics.py",
    "line_number": 313,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get a summary of all performance metrics.",
    "parameters": [],
    "return_annotation": "Dict[str, Any]"
  },
  "performance_metrics.timed_operation": {
    "name": "timed_operation",
    "module": "performance_metrics",
    "file_path": "core/performance_metrics.py",
    "line_number": 318,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: ^\\s*pass\\s*$"
    ],
    "docstring": "\n    Decorator to automatically time operations and record metrics.\n    \n    Args:\n        operation_name: Name for the operation (defaults to function name)\n        include_args: Whether to include function arguments in metadata\n    ",
    "parameters": [
      "operation_name",
      "include_args"
    ],
    "return_annotation": null
  },
  "performance_metrics.update": {
    "name": "update",
    "module": "performance_metrics",
    "file_path": "core/performance_metrics.py",
    "line_number": 64,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Update metrics with a new measurement.",
    "parameters": [
      "self",
      "duration",
      "success"
    ],
    "return_annotation": null
  },
  "performance_metrics.to_dict": {
    "name": "to_dict",
    "module": "performance_metrics",
    "file_path": "core/performance_metrics.py",
    "line_number": 130,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Convert to dictionary.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "performance_metrics.capture_current": {
    "name": "capture_current",
    "module": "performance_metrics",
    "file_path": "core/performance_metrics.py",
    "line_number": 106,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Capture current system resource usage.",
    "parameters": [
      "cls"
    ],
    "return_annotation": "'SystemResourceMetrics'"
  },
  "performance_metrics.__init__": {
    "name": "__init__",
    "module": "performance_metrics",
    "file_path": "core/performance_metrics.py",
    "line_number": 147,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": null,
    "parameters": [
      "self",
      "max_history_size"
    ],
    "return_annotation": null
  },
  "performance_metrics.set_enabled": {
    "name": "set_enabled",
    "module": "performance_metrics",
    "file_path": "core/performance_metrics.py",
    "line_number": 158,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Enable or disable metrics collection.",
    "parameters": [
      "self",
      "enabled"
    ],
    "return_annotation": null
  },
  "performance_metrics.record_operation": {
    "name": "record_operation",
    "module": "performance_metrics",
    "file_path": "core/performance_metrics.py",
    "line_number": 162,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: ^\\s*return\\s*$"
    ],
    "docstring": "Record an operation's performance metrics.",
    "parameters": [
      "self",
      "operation_name",
      "duration",
      "success",
      "metadata"
    ],
    "return_annotation": null
  },
  "performance_metrics.record_histogram": {
    "name": "record_histogram",
    "module": "performance_metrics",
    "file_path": "core/performance_metrics.py",
    "line_number": 200,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: ^\\s*return\\s*$",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Record a value in a histogram metric.",
    "parameters": [
      "self",
      "histogram_name",
      "value",
      "metadata"
    ],
    "return_annotation": null
  },
  "performance_metrics.get_operation_metrics": {
    "name": "get_operation_metrics",
    "module": "performance_metrics",
    "file_path": "core/performance_metrics.py",
    "line_number": 211,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get performance metrics for a specific operation.",
    "parameters": [
      "self",
      "operation_name"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "performance_metrics.get_all_operation_metrics": {
    "name": "get_all_operation_metrics",
    "module": "performance_metrics",
    "file_path": "core/performance_metrics.py",
    "line_number": 218,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get performance metrics for all operations.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Dict[str, Dict[str, Any]]"
  },
  "performance_metrics.get_custom_metric": {
    "name": "get_custom_metric",
    "module": "performance_metrics",
    "file_path": "core/performance_metrics.py",
    "line_number": 223,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get custom metric values.",
    "parameters": [
      "self",
      "metric_name",
      "limit"
    ],
    "return_annotation": "List[Dict[str, Any]]"
  },
  "performance_metrics.get_system_metrics": {
    "name": "get_system_metrics",
    "module": "performance_metrics",
    "file_path": "core/performance_metrics.py",
    "line_number": 231,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get system resource metrics.",
    "parameters": [
      "self",
      "limit"
    ],
    "return_annotation": "List[Dict[str, Any]]"
  },
  "performance_metrics.get_summary_stats": {
    "name": "get_summary_stats",
    "module": "performance_metrics",
    "file_path": "core/performance_metrics.py",
    "line_number": 239,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get summary statistics for all metrics.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "performance_metrics._start_system_monitoring": {
    "name": "_start_system_monitoring",
    "module": "performance_metrics",
    "file_path": "core/performance_metrics.py",
    "line_number": 262,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Start background system metrics collection.",
    "parameters": [
      "self"
    ],
    "return_annotation": null
  },
  "performance_metrics.reset_metrics": {
    "name": "reset_metrics",
    "module": "performance_metrics",
    "file_path": "core/performance_metrics.py",
    "line_number": 278,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Reset all collected metrics.",
    "parameters": [
      "self"
    ],
    "return_annotation": null
  },
  "performance_metrics.decorator": {
    "name": "decorator",
    "module": "performance_metrics",
    "file_path": "core/performance_metrics.py",
    "line_number": 326,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: ^\\s*pass\\s*$"
    ],
    "docstring": null,
    "parameters": [
      "func"
    ],
    "return_annotation": null
  },
  "performance_metrics.collect_system_metrics": {
    "name": "collect_system_metrics",
    "module": "performance_metrics",
    "file_path": "core/performance_metrics.py",
    "line_number": 264,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": null,
    "parameters": [],
    "return_annotation": null
  },
  "performance_metrics.wrapper": {
    "name": "wrapper",
    "module": "performance_metrics",
    "file_path": "core/performance_metrics.py",
    "line_number": 330,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: ^\\s*pass\\s*$",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": null,
    "parameters": [],
    "return_annotation": null
  },
  "base_nodes.__iter__": {
    "name": "__iter__",
    "module": "base_nodes",
    "file_path": "core/base_nodes.py",
    "line_number": 32,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Iterator that yields (attribute_name, attribute_value) pairs.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Iterator[Tuple[str, Any]]"
  },
  "sfm_query.__init__": {
    "name": "__init__",
    "module": "sfm_query",
    "file_path": "core/sfm_query.py",
    "line_number": 248,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": null,
    "parameters": [
      "self",
      "graph"
    ],
    "return_annotation": null
  },
  "sfm_query.get_node_centrality": {
    "name": "get_node_centrality",
    "module": "sfm_query",
    "file_path": "core/sfm_query.py",
    "line_number": 276,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "Calculate centrality measures for a node using strategy pattern.",
    "parameters": [
      "self",
      "node_id",
      "centrality_type"
    ],
    "return_annotation": "float"
  },
  "sfm_query.get_most_central_nodes": {
    "name": "get_most_central_nodes",
    "module": "sfm_query",
    "file_path": "core/sfm_query.py",
    "line_number": 284,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "Get the most central nodes by type using strategy pattern.",
    "parameters": [
      "self",
      "node_type",
      "centrality_type",
      "limit"
    ],
    "return_annotation": "List[Tuple[uuid.UUID, float]]"
  },
  "sfm_query.get_node_neighbors": {
    "name": "get_node_neighbors",
    "module": "sfm_query",
    "file_path": "core/sfm_query.py",
    "line_number": 371,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "Get neighboring nodes within specified distance.",
    "parameters": [
      "self",
      "node_id",
      "relationship_kinds",
      "distance"
    ],
    "return_annotation": "List[uuid.UUID]"
  },
  "sfm_query.find_shortest_path": {
    "name": "find_shortest_path",
    "module": "sfm_query",
    "file_path": "core/sfm_query.py",
    "line_number": 386,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: return\\s+None\\s*$"
    ],
    "docstring": "Find shortest path between two nodes.",
    "parameters": [
      "self",
      "source_id",
      "target_id",
      "relationship_kinds"
    ],
    "return_annotation": "Optional[List[uuid.UUID]]"
  },
  "sfm_query.get_relationship_strength": {
    "name": "get_relationship_strength",
    "module": "sfm_query",
    "file_path": "core/sfm_query.py",
    "line_number": 414,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Calculate aggregate relationship strength between nodes.",
    "parameters": [
      "self",
      "source_id",
      "target_id"
    ],
    "return_annotation": "float"
  },
  "sfm_query.find_cycles": {
    "name": "find_cycles",
    "module": "sfm_query",
    "file_path": "core/sfm_query.py",
    "line_number": 431,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Find cycles in the graph (feedback loops).",
    "parameters": [
      "self",
      "max_length"
    ],
    "return_annotation": "List[List[uuid.UUID]]"
  },
  "sfm_query.trace_resource_flows": {
    "name": "trace_resource_flows",
    "module": "sfm_query",
    "file_path": "core/sfm_query.py",
    "line_number": 443,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Trace flows of specific resource types through the network.",
    "parameters": [
      "self",
      "resource_type",
      "source_actors"
    ],
    "return_annotation": "FlowAnalysis"
  },
  "sfm_query.identify_bottlenecks": {
    "name": "identify_bottlenecks",
    "module": "sfm_query",
    "file_path": "core/sfm_query.py",
    "line_number": 485,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Identify bottleneck nodes in flow networks.",
    "parameters": [
      "self",
      "flow_type"
    ],
    "return_annotation": "List[uuid.UUID]"
  },
  "sfm_query.calculate_flow_efficiency": {
    "name": "calculate_flow_efficiency",
    "module": "sfm_query",
    "file_path": "core/sfm_query.py",
    "line_number": 506,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Calculate efficiency of flows between nodes.",
    "parameters": [
      "self",
      "source_id",
      "target_id"
    ],
    "return_annotation": "float"
  },
  "sfm_query.analyze_policy_impact": {
    "name": "analyze_policy_impact",
    "module": "sfm_query",
    "file_path": "core/sfm_query.py",
    "line_number": 533,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "Analyze the network impact of a policy intervention.",
    "parameters": [
      "self",
      "policy_id",
      "impact_radius"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "sfm_query.identify_policy_targets": {
    "name": "identify_policy_targets",
    "module": "sfm_query",
    "file_path": "core/sfm_query.py",
    "line_number": 578,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Identify nodes directly and indirectly affected by a policy.",
    "parameters": [
      "self",
      "policy_id"
    ],
    "return_annotation": "List[uuid.UUID]"
  },
  "sfm_query.compare_policy_scenarios": {
    "name": "compare_policy_scenarios",
    "module": "sfm_query",
    "file_path": "core/sfm_query.py",
    "line_number": 592,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Compare multiple policy scenarios.",
    "parameters": [
      "self",
      "scenario_graphs"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "sfm_query.get_network_density": {
    "name": "get_network_density",
    "module": "sfm_query",
    "file_path": "core/sfm_query.py",
    "line_number": 648,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Calculate overall network density.",
    "parameters": [
      "self"
    ],
    "return_annotation": "float"
  },
  "sfm_query.identify_communities": {
    "name": "identify_communities",
    "module": "sfm_query",
    "file_path": "core/sfm_query.py",
    "line_number": 652,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Identify communities/clusters in the network.",
    "parameters": [
      "self",
      "algorithm"
    ],
    "return_annotation": "Dict[int, List[uuid.UUID]]"
  },
  "sfm_query.get_structural_holes": {
    "name": "get_structural_holes",
    "module": "sfm_query",
    "file_path": "core/sfm_query.py",
    "line_number": 695,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Identify nodes that bridge structural holes.",
    "parameters": [
      "self"
    ],
    "return_annotation": "List[uuid.UUID]"
  },
  "sfm_query.comprehensive_node_analysis": {
    "name": "comprehensive_node_analysis",
    "module": "sfm_query",
    "file_path": "core/sfm_query.py",
    "line_number": 718,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Comprehensive analysis of a single node.",
    "parameters": [
      "self",
      "node_id"
    ],
    "return_annotation": "NodeMetrics"
  },
  "sfm_query.system_vulnerability_analysis": {
    "name": "system_vulnerability_analysis",
    "module": "sfm_query",
    "file_path": "core/sfm_query.py",
    "line_number": 755,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Analyze system-wide vulnerabilities and resilience.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "sfm_query.analyze_temporal_changes": {
    "name": "analyze_temporal_changes",
    "module": "sfm_query",
    "file_path": "core/sfm_query.py",
    "line_number": 774,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Analyze changes across multiple time slices of the graph.",
    "parameters": [
      "self",
      "time_slice_graphs"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "sfm_query.detect_structural_changes": {
    "name": "detect_structural_changes",
    "module": "sfm_query",
    "file_path": "core/sfm_query.py",
    "line_number": 809,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Detect structural changes between two graph states.",
    "parameters": [
      "self",
      "reference_graph",
      "comparison_graph"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "sfm_query.assess_network_vulnerabilities": {
    "name": "assess_network_vulnerabilities",
    "module": "sfm_query",
    "file_path": "core/sfm_query.py",
    "line_number": 839,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Comprehensive vulnerability assessment of the network.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "sfm_query.simulate_node_failure_impact": {
    "name": "simulate_node_failure_impact",
    "module": "sfm_query",
    "file_path": "core/sfm_query.py",
    "line_number": 927,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Simulate the impact of node failures on network connectivity.",
    "parameters": [
      "self",
      "node_ids",
      "failure_mode"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "sfm_query.analyze_flow_patterns": {
    "name": "analyze_flow_patterns",
    "module": "sfm_query",
    "file_path": "core/sfm_query.py",
    "line_number": 1001,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Analyze patterns in resource or value flows.",
    "parameters": [
      "self",
      "flow_type",
      "time_window"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "sfm_query.identify_flow_inefficiencies": {
    "name": "identify_flow_inefficiencies",
    "module": "sfm_query",
    "file_path": "core/sfm_query.py",
    "line_number": 1026,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Identify inefficiencies in flow patterns.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "sfm_query._build_networkx_graph": {
    "name": "_build_networkx_graph",
    "module": "sfm_query",
    "file_path": "core/sfm_query.py",
    "line_number": 254,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Convert SFMGraph to NetworkX graph for analysis.",
    "parameters": [
      "self"
    ],
    "return_annotation": "nx.MultiDiGraph"
  },
  "sfm_query._get_direct_neighbors": {
    "name": "_get_direct_neighbors",
    "module": "sfm_query",
    "file_path": "core/sfm_query.py",
    "line_number": 312,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "Get direct neighbors of a node.",
    "parameters": [
      "self",
      "node_id",
      "relationship_kinds"
    ],
    "return_annotation": "List[uuid.UUID]"
  },
  "sfm_query._get_multihop_neighbors_with_filter": {
    "name": "_get_multihop_neighbors_with_filter",
    "module": "sfm_query",
    "file_path": "core/sfm_query.py",
    "line_number": 330,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "Get multi-hop neighbors with relationship kind filtering.",
    "parameters": [
      "self",
      "node_id",
      "relationship_kinds",
      "distance"
    ],
    "return_annotation": "List[uuid.UUID]"
  },
  "sfm_query._get_multihop_neighbors_all": {
    "name": "_get_multihop_neighbors_all",
    "module": "sfm_query",
    "file_path": "core/sfm_query.py",
    "line_number": 359,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get multi-hop neighbors for all relationship types.",
    "parameters": [
      "self",
      "node_id",
      "distance"
    ],
    "return_annotation": "List[uuid.UUID]"
  },
  "sfm_query._calculate_connectivity_impact": {
    "name": "_calculate_connectivity_impact",
    "module": "sfm_query",
    "file_path": "core/sfm_query.py",
    "line_number": 894,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "Calculate connectivity impact metrics.",
    "parameters": [
      "self",
      "sim_graph",
      "original_components",
      "original_largest"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "sfm_query._simulate_cascade_failures": {
    "name": "_simulate_cascade_failures",
    "module": "sfm_query",
    "file_path": "core/sfm_query.py",
    "line_number": 915,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Simulate cascading node failures.",
    "parameters": [
      "self",
      "sim_graph"
    ],
    "return_annotation": "List[Any]"
  },
  "sfm_query._get_relevant_flows": {
    "name": "_get_relevant_flows",
    "module": "sfm_query",
    "file_path": "core/sfm_query.py",
    "line_number": 966,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get flows of the specified type.",
    "parameters": [
      "self",
      "flow_type"
    ],
    "return_annotation": "List[Tuple[Any, Any, Dict[str, Any]]]"
  },
  "sfm_query._analyze_flow_distribution": {
    "name": "_analyze_flow_distribution",
    "module": "sfm_query",
    "file_path": "core/sfm_query.py",
    "line_number": 976,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "Analyze flow distribution by node type.",
    "parameters": [
      "self",
      "relevant_flows"
    ],
    "return_annotation": "Dict[str, int]"
  },
  "sfm_query._identify_major_pathways": {
    "name": "_identify_major_pathways",
    "module": "sfm_query",
    "file_path": "core/sfm_query.py",
    "line_number": 988,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "Identify major flow pathways (high-volume routes).",
    "parameters": [
      "self",
      "relevant_flows"
    ],
    "return_annotation": "List[Tuple[str, float]]"
  },
  "sfm_query._build_networkx_from_graph": {
    "name": "_build_networkx_from_graph",
    "module": "sfm_query",
    "file_path": "core/sfm_query.py",
    "line_number": 1073,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Helper method to build NetworkX graph from SFMGraph.",
    "parameters": [
      "self",
      "sfm_graph"
    ],
    "return_annotation": "nx.MultiDiGraph"
  },
  "sfm_query._compare_scenario_structures": {
    "name": "_compare_scenario_structures",
    "module": "sfm_query",
    "file_path": "core/sfm_query.py",
    "line_number": 1094,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Compare structural properties across scenarios.",
    "parameters": [
      "self",
      "scenario_graphs"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "sfm_query._analyze_scenario_policy_impacts": {
    "name": "_analyze_scenario_policy_impacts",
    "module": "sfm_query",
    "file_path": "core/sfm_query.py",
    "line_number": 1139,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Analyze policy impact differences across scenarios.",
    "parameters": [
      "self",
      "scenario_graphs"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "sfm_query._calculate_scenario_similarity_matrix": {
    "name": "_calculate_scenario_similarity_matrix",
    "module": "sfm_query",
    "file_path": "core/sfm_query.py",
    "line_number": 1160,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Calculate similarity matrix between all scenario pairs.",
    "parameters": [
      "self",
      "scenario_graphs"
    ],
    "return_annotation": "List[List[float]]"
  },
  "sfm_query._identify_key_scenario_differences": {
    "name": "_identify_key_scenario_differences",
    "module": "sfm_query",
    "file_path": "core/sfm_query.py",
    "line_number": 1185,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Identify key structural differences between scenarios.",
    "parameters": [
      "self",
      "scenario_graphs"
    ],
    "return_annotation": "List[Dict[str, Any]]"
  },
  "sfm_query.create_query_engine": {
    "name": "create_query_engine",
    "module": "sfm_query",
    "file_path": "core/sfm_query.py",
    "line_number": 1226,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Create a query engine for the specified backend.",
    "parameters": [
      "graph",
      "backend"
    ],
    "return_annotation": "SFMQueryEngine"
  },
  "audit_logger.audit_operation": {
    "name": "audit_operation",
    "module": "audit_logger",
    "file_path": "core/audit_logger.py",
    "line_number": 218,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: ^\\s*pass\\s*$"
    ],
    "docstring": "\n    Decorator for automatic audit logging of operations.\n\n    Args:\n        operation_type: Type of operation being performed\n        operation_name: Name of operation (defaults to function name)\n        entity_type: Type of entity being operated on\n        include_performance: Whether to include performance metrics\n        level: Audit level for the operation\n    ",
    "parameters": [
      "operation_type",
      "operation_name",
      "entity_type",
      "include_performance",
      "level"
    ],
    "return_annotation": "Callable[[F], F]"
  },
  "audit_logger.log_operation": {
    "name": "log_operation",
    "module": "audit_logger",
    "file_path": "core/audit_logger.py",
    "line_number": 134,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "Log a standard operation.",
    "parameters": [
      "self",
      "operation_type",
      "operation_name",
      "entity_type",
      "entity_id",
      "message",
      "data",
      "level",
      "transaction_id"
    ],
    "return_annotation": null
  },
  "audit_logger.log_security_event": {
    "name": "log_security_event",
    "module": "audit_logger",
    "file_path": "core/audit_logger.py",
    "line_number": 151,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "Log a security-related event.",
    "parameters": [
      "self",
      "message",
      "security_context",
      "operation_name",
      "data"
    ],
    "return_annotation": null
  },
  "audit_logger.log_performance_event": {
    "name": "log_performance_event",
    "module": "audit_logger",
    "file_path": "core/audit_logger.py",
    "line_number": 165,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "Log a performance-related event.",
    "parameters": [
      "self",
      "operation_name",
      "duration",
      "additional_metrics",
      "entity_type",
      "entity_id"
    ],
    "return_annotation": null
  },
  "audit_logger.get_audit_logger": {
    "name": "get_audit_logger",
    "module": "audit_logger",
    "file_path": "core/audit_logger.py",
    "line_number": 317,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get the global audit logger.",
    "parameters": [],
    "return_annotation": "AuditLogger"
  },
  "audit_logger.set_user_context": {
    "name": "set_user_context",
    "module": "audit_logger",
    "file_path": "core/audit_logger.py",
    "line_number": 104,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Set current user context for audit logging.",
    "parameters": [
      "self",
      "user_id",
      "session_id"
    ],
    "return_annotation": null
  },
  "audit_logger.clear_user_context": {
    "name": "clear_user_context",
    "module": "audit_logger",
    "file_path": "core/audit_logger.py",
    "line_number": 108,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Clear current user context.",
    "parameters": [
      "self"
    ],
    "return_annotation": null
  },
  "audit_logger.to_dict": {
    "name": "to_dict",
    "module": "audit_logger",
    "file_path": "core/audit_logger.py",
    "line_number": 67,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Convert audit event to dictionary for logging.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "audit_logger.__init__": {
    "name": "__init__",
    "module": "audit_logger",
    "file_path": "core/audit_logger.py",
    "line_number": 90,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": null,
    "parameters": [
      "self",
      "logger_name"
    ],
    "return_annotation": null
  },
  "audit_logger.log_event": {
    "name": "log_event",
    "module": "audit_logger",
    "file_path": "core/audit_logger.py",
    "line_number": 112,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Log an audit event.",
    "parameters": [
      "self",
      "event"
    ],
    "return_annotation": null
  },
  "audit_logger.get_audit_stats": {
    "name": "get_audit_stats",
    "module": "audit_logger",
    "file_path": "core/audit_logger.py",
    "line_number": 184,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get audit logging statistics.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "audit_logger.decorator": {
    "name": "decorator",
    "module": "audit_logger",
    "file_path": "core/audit_logger.py",
    "line_number": 231,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: ^\\s*pass\\s*$"
    ],
    "docstring": null,
    "parameters": [
      "func"
    ],
    "return_annotation": "F"
  },
  "audit_logger.wrapper": {
    "name": "wrapper",
    "module": "audit_logger",
    "file_path": "core/audit_logger.py",
    "line_number": 233,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: ^\\s*pass\\s*$",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": null,
    "parameters": [],
    "return_annotation": "Any"
  },
  "metrics.monitor_performance": {
    "name": "monitor_performance",
    "module": "metrics",
    "file_path": "core/metrics.py",
    "line_number": 382,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "\n    Decorator for automatic performance monitoring.\n    \n    Args:\n        operation_type: Type of operation (e.g., 'entity', 'relationship', 'query')\n        entity_type: Type of entity being operated on\n    ",
    "parameters": [
      "operation_type",
      "entity_type"
    ],
    "return_annotation": null
  },
  "metrics.get_metrics_collector": {
    "name": "get_metrics_collector",
    "module": "metrics",
    "file_path": "core/metrics.py",
    "line_number": 438,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get the global metrics collector instance.",
    "parameters": [],
    "return_annotation": "MetricsCollector"
  },
  "metrics.configure_metrics": {
    "name": "configure_metrics",
    "module": "metrics",
    "file_path": "core/metrics.py",
    "line_number": 446,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Configure the global metrics system.",
    "parameters": [
      "config"
    ],
    "return_annotation": null
  },
  "metrics.__init__": {
    "name": "__init__",
    "module": "metrics",
    "file_path": "core/metrics.py",
    "line_number": 254,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": null,
    "parameters": [
      "self",
      "config"
    ],
    "return_annotation": null
  },
  "metrics.is_available": {
    "name": "is_available",
    "module": "metrics",
    "file_path": "core/metrics.py",
    "line_number": 154,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Check if Prometheus metrics are available.",
    "parameters": [
      "self"
    ],
    "return_annotation": "bool"
  },
  "metrics.record_request": {
    "name": "record_request",
    "module": "metrics",
    "file_path": "core/metrics.py",
    "line_number": 267,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Record HTTP request metrics.",
    "parameters": [
      "self",
      "method",
      "endpoint",
      "status",
      "duration"
    ],
    "return_annotation": null
  },
  "metrics.record_entity_creation": {
    "name": "record_entity_creation",
    "module": "metrics",
    "file_path": "core/metrics.py",
    "line_number": 166,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: ^\\s*return\\s*$",
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Record entity creation.",
    "parameters": [
      "self",
      "entity_type"
    ],
    "return_annotation": null
  },
  "metrics.record_relationship_creation": {
    "name": "record_relationship_creation",
    "module": "metrics",
    "file_path": "core/metrics.py",
    "line_number": 173,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: ^\\s*return\\s*$",
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Record relationship creation.",
    "parameters": [
      "self",
      "relationship_type"
    ],
    "return_annotation": null
  },
  "metrics.record_query_execution": {
    "name": "record_query_execution",
    "module": "metrics",
    "file_path": "core/metrics.py",
    "line_number": 180,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: ^\\s*return\\s*$",
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Record query execution.",
    "parameters": [
      "self",
      "query_type",
      "duration"
    ],
    "return_annotation": null
  },
  "metrics.record_cache_hit": {
    "name": "record_cache_hit",
    "module": "metrics",
    "file_path": "core/metrics.py",
    "line_number": 188,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: ^\\s*return\\s*$",
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Record cache hit.",
    "parameters": [
      "self",
      "cache_type"
    ],
    "return_annotation": null
  },
  "metrics.record_cache_miss": {
    "name": "record_cache_miss",
    "module": "metrics",
    "file_path": "core/metrics.py",
    "line_number": 195,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: ^\\s*return\\s*$",
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Record cache miss.",
    "parameters": [
      "self",
      "cache_type"
    ],
    "return_annotation": null
  },
  "metrics.record_system_error": {
    "name": "record_system_error",
    "module": "metrics",
    "file_path": "core/metrics.py",
    "line_number": 202,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: ^\\s*return\\s*$",
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Record system error.",
    "parameters": [
      "self",
      "error_type"
    ],
    "return_annotation": null
  },
  "metrics.record_operation_duration": {
    "name": "record_operation_duration",
    "module": "metrics",
    "file_path": "core/metrics.py",
    "line_number": 209,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: ^\\s*return\\s*$",
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Record operation duration.",
    "parameters": [
      "self",
      "operation_type",
      "operation_name",
      "duration"
    ],
    "return_annotation": null
  },
  "metrics.update_active_connections": {
    "name": "update_active_connections",
    "module": "metrics",
    "file_path": "core/metrics.py",
    "line_number": 219,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: ^\\s*return\\s*$",
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Update active connections gauge.",
    "parameters": [
      "self",
      "count"
    ],
    "return_annotation": null
  },
  "metrics.update_memory_usage": {
    "name": "update_memory_usage",
    "module": "metrics",
    "file_path": "core/metrics.py",
    "line_number": 226,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: ^\\s*return\\s*$",
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Update memory usage gauge.",
    "parameters": [
      "self",
      "usage_type",
      "bytes_used"
    ],
    "return_annotation": null
  },
  "metrics.set_system_info": {
    "name": "set_system_info",
    "module": "metrics",
    "file_path": "core/metrics.py",
    "line_number": 233,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: ^\\s*return\\s*$",
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Set system information.",
    "parameters": [
      "self",
      "info"
    ],
    "return_annotation": null
  },
  "metrics.get_metrics": {
    "name": "get_metrics",
    "module": "metrics",
    "file_path": "core/metrics.py",
    "line_number": 240,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get metrics in Prometheus format.",
    "parameters": [
      "self"
    ],
    "return_annotation": "str"
  },
  "metrics.record_entity_operation": {
    "name": "record_entity_operation",
    "module": "metrics",
    "file_path": "core/metrics.py",
    "line_number": 279,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Record entity operation metrics.",
    "parameters": [
      "self",
      "operation",
      "entity_type",
      "duration"
    ],
    "return_annotation": null
  },
  "metrics.record_relationship_operation": {
    "name": "record_relationship_operation",
    "module": "metrics",
    "file_path": "core/metrics.py",
    "line_number": 295,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Record relationship operation metrics.",
    "parameters": [
      "self",
      "operation",
      "relationship_type",
      "duration"
    ],
    "return_annotation": null
  },
  "metrics.record_query": {
    "name": "record_query",
    "module": "metrics",
    "file_path": "core/metrics.py",
    "line_number": 311,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Record query execution metrics.",
    "parameters": [
      "self",
      "query_type",
      "duration"
    ],
    "return_annotation": null
  },
  "metrics.record_cache_operation": {
    "name": "record_cache_operation",
    "module": "metrics",
    "file_path": "core/metrics.py",
    "line_number": 323,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Record cache operation metrics.",
    "parameters": [
      "self",
      "operation",
      "cache_type"
    ],
    "return_annotation": null
  },
  "metrics.record_error": {
    "name": "record_error",
    "module": "metrics",
    "file_path": "core/metrics.py",
    "line_number": 335,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Record system error metrics.",
    "parameters": [
      "self",
      "error_type",
      "error_message"
    ],
    "return_annotation": null
  },
  "metrics.update_system_metrics": {
    "name": "update_system_metrics",
    "module": "metrics",
    "file_path": "core/metrics.py",
    "line_number": 344,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Update system-level metrics.",
    "parameters": [
      "self",
      "metrics"
    ],
    "return_annotation": null
  },
  "metrics.add_custom_collector": {
    "name": "add_custom_collector",
    "module": "metrics",
    "file_path": "core/metrics.py",
    "line_number": 356,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Add a custom metrics collector.",
    "parameters": [
      "self",
      "name",
      "collector"
    ],
    "return_annotation": null
  },
  "metrics.collect_custom_metrics": {
    "name": "collect_custom_metrics",
    "module": "metrics",
    "file_path": "core/metrics.py",
    "line_number": 361,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Collect metrics from custom collectors.",
    "parameters": [
      "self"
    ],
    "return_annotation": null
  },
  "metrics.get_prometheus_metrics": {
    "name": "get_prometheus_metrics",
    "module": "metrics",
    "file_path": "core/metrics.py",
    "line_number": 371,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get metrics in Prometheus format.",
    "parameters": [
      "self"
    ],
    "return_annotation": "str"
  },
  "metrics.get_performance_summary": {
    "name": "get_performance_summary",
    "module": "metrics",
    "file_path": "core/metrics.py",
    "line_number": 377,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get performance metrics summary.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "metrics.decorator": {
    "name": "decorator",
    "module": "metrics",
    "file_path": "core/metrics.py",
    "line_number": 390,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": null,
    "parameters": [
      "func"
    ],
    "return_annotation": null
  },
  "metrics.wrapper": {
    "name": "wrapper",
    "module": "metrics",
    "file_path": "core/metrics.py",
    "line_number": 392,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": null,
    "parameters": [],
    "return_annotation": null
  },
  "graph.__init__": {
    "name": "__init__",
    "module": "graph",
    "file_path": "core/graph.py",
    "line_number": 44,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Initialize the registry with ordered type mappings.",
    "parameters": [
      "self"
    ],
    "return_annotation": null
  },
  "graph.get_collection_name": {
    "name": "get_collection_name",
    "module": "graph",
    "file_path": "core/graph.py",
    "line_number": 79,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get the collection name for a given node type.",
    "parameters": [
      "self",
      "node"
    ],
    "return_annotation": "str"
  },
  "graph.get_all_collection_names": {
    "name": "get_all_collection_names",
    "module": "graph",
    "file_path": "core/graph.py",
    "line_number": 86,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get all collection names in the registry.",
    "parameters": [
      "self"
    ],
    "return_annotation": "List[str]"
  },
  "graph.iter_collections": {
    "name": "iter_collections",
    "module": "graph",
    "file_path": "core/graph.py",
    "line_number": 90,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Iterate over all collections in the graph.",
    "parameters": [
      "self",
      "graph"
    ],
    "return_annotation": "Iterator[Dict[uuid.UUID, Node]]"
  },
  "graph.__post_init__": {
    "name": "__post_init__",
    "module": "graph",
    "file_path": "core/graph.py",
    "line_number": 179,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Initialize performance optimizations after dataclass initialization.",
    "parameters": [
      "self"
    ],
    "return_annotation": null
  },
  "graph.__getstate__": {
    "name": "__getstate__",
    "module": "graph",
    "file_path": "core/graph.py",
    "line_number": 194,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Custom pickle serialization to handle non-serializable objects.",
    "parameters": [
      "self"
    ],
    "return_annotation": null
  },
  "graph.__setstate__": {
    "name": "__setstate__",
    "module": "graph",
    "file_path": "core/graph.py",
    "line_number": 204,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Custom pickle deserialization to restore non-serializable objects.",
    "parameters": [
      "self",
      "state"
    ],
    "return_annotation": "None"
  },
  "graph._setup_cache_invalidation_rules": {
    "name": "_setup_cache_invalidation_rules",
    "module": "graph",
    "file_path": "core/graph.py",
    "line_number": 219,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Set up cache invalidation rules for different events.",
    "parameters": [
      "self"
    ],
    "return_annotation": null
  },
  "graph.add_node": {
    "name": "add_node",
    "module": "graph",
    "file_path": "core/graph.py",
    "line_number": 247,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Add a node to the appropriate collection based on its type.",
    "parameters": [
      "self",
      "node"
    ],
    "return_annotation": "Node"
  },
  "graph.add_relationship": {
    "name": "add_relationship",
    "module": "graph",
    "file_path": "core/graph.py",
    "line_number": 274,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Add a relationship to the SFM graph with validation.",
    "parameters": [
      "self",
      "relationship"
    ],
    "return_annotation": "Relationship"
  },
  "graph._find_node_by_id": {
    "name": "_find_node_by_id",
    "module": "graph",
    "file_path": "core/graph.py",
    "line_number": 307,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Find a node by its ID using central index for O(1) lookup.",
    "parameters": [
      "self",
      "node_id"
    ],
    "return_annotation": "Optional[Node]"
  },
  "graph.get_node_by_id": {
    "name": "get_node_by_id",
    "module": "graph",
    "file_path": "core/graph.py",
    "line_number": 319,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Public method to retrieve a node by its ID.",
    "parameters": [
      "self",
      "node_id"
    ],
    "return_annotation": "Optional[Node]"
  },
  "graph.__iter__": {
    "name": "__iter__",
    "module": "graph",
    "file_path": "core/graph.py",
    "line_number": 323,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Iterate over all nodes in the SFMGraph.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Iterator[Node]"
  },
  "graph.__len__": {
    "name": "__len__",
    "module": "graph",
    "file_path": "core/graph.py",
    "line_number": 328,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Return the total number of nodes in the graph.",
    "parameters": [
      "self"
    ],
    "return_annotation": "int"
  },
  "graph.clear": {
    "name": "clear",
    "module": "graph",
    "file_path": "core/graph.py",
    "line_number": 334,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Clear all nodes and relationships from the graph.",
    "parameters": [
      "self"
    ],
    "return_annotation": "None"
  },
  "graph._clear_relationship_cache": {
    "name": "_clear_relationship_cache",
    "module": "graph",
    "file_path": "core/graph.py",
    "line_number": 344,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Clear the relationship cache when relationships change.",
    "parameters": [
      "self"
    ],
    "return_annotation": "None"
  },
  "graph._get_node_id_for_cache": {
    "name": "_get_node_id_for_cache",
    "module": "graph",
    "file_path": "core/graph.py",
    "line_number": 348,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Convert node ID to string format for cache operations.",
    "parameters": [
      "self",
      "node_id"
    ],
    "return_annotation": "str"
  },
  "graph.get_node_relationships": {
    "name": "get_node_relationships",
    "module": "graph",
    "file_path": "core/graph.py",
    "line_number": 353,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get all relationships for a node with caching for performance.",
    "parameters": [
      "self",
      "node_id"
    ],
    "return_annotation": "List[Relationship]"
  },
  "graph.enable_lazy_loading": {
    "name": "enable_lazy_loading",
    "module": "graph",
    "file_path": "core/graph.py",
    "line_number": 392,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Enable lazy loading with a custom node loader function.\n\n        Args:\n            node_loader: Function that takes a UUID and returns a Node or None\n        ",
    "parameters": [
      "self",
      "node_loader"
    ],
    "return_annotation": "None"
  },
  "graph.disable_lazy_loading": {
    "name": "disable_lazy_loading",
    "module": "graph",
    "file_path": "core/graph.py",
    "line_number": 401,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Disable lazy loading.",
    "parameters": [
      "self"
    ],
    "return_annotation": "None"
  },
  "graph._find_node_by_id_with_lazy_loading": {
    "name": "_find_node_by_id_with_lazy_loading",
    "module": "graph",
    "file_path": "core/graph.py",
    "line_number": 406,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Find a node by ID with optional lazy loading support.",
    "parameters": [
      "self",
      "node_id"
    ],
    "return_annotation": "Optional[Node]"
  },
  "graph.get_all_node_ids": {
    "name": "get_all_node_ids",
    "module": "graph",
    "file_path": "core/graph.py",
    "line_number": 428,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get all node IDs in the graph.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Set[uuid.UUID]"
  },
  "graph.remove_node_from_memory": {
    "name": "remove_node_from_memory",
    "module": "graph",
    "file_path": "core/graph.py",
    "line_number": 432,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Remove a node from memory (but not from persistent storage).",
    "parameters": [
      "self",
      "node_id"
    ],
    "return_annotation": "bool"
  },
  "graph.get_node_size_estimate": {
    "name": "get_node_size_estimate",
    "module": "graph",
    "file_path": "core/graph.py",
    "line_number": 460,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get estimated memory size of a node in bytes.",
    "parameters": [
      "self",
      "node_id"
    ],
    "return_annotation": "int"
  },
  "graph.set_memory_limit": {
    "name": "set_memory_limit",
    "module": "graph",
    "file_path": "core/graph.py",
    "line_number": 481,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Set the memory limit for the graph.",
    "parameters": [
      "self",
      "limit_mb"
    ],
    "return_annotation": "None"
  },
  "graph.get_memory_usage": {
    "name": "get_memory_usage",
    "module": "graph",
    "file_path": "core/graph.py",
    "line_number": 487,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get current memory usage statistics.",
    "parameters": [
      "self"
    ],
    "return_annotation": "MemoryUsageStats"
  },
  "graph.force_memory_cleanup": {
    "name": "force_memory_cleanup",
    "module": "graph",
    "file_path": "core/graph.py",
    "line_number": 493,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Force memory cleanup by evicting nodes.",
    "parameters": [
      "self"
    ],
    "return_annotation": "int"
  },
  "graph.set_eviction_strategy": {
    "name": "set_eviction_strategy",
    "module": "graph",
    "file_path": "core/graph.py",
    "line_number": 499,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Set the node eviction strategy.",
    "parameters": [
      "self",
      "strategy"
    ],
    "return_annotation": "None"
  },
  "graph.get_memory_stats": {
    "name": "get_memory_stats",
    "module": "graph",
    "file_path": "core/graph.py",
    "line_number": 504,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get memory management statistics.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "graph.enable_advanced_caching": {
    "name": "enable_advanced_caching",
    "module": "graph",
    "file_path": "core/graph.py",
    "line_number": 523,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Enable or disable advanced caching.",
    "parameters": [
      "self",
      "enable"
    ],
    "return_annotation": "None"
  },
  "graph.clear_all_caches": {
    "name": "clear_all_caches",
    "module": "graph",
    "file_path": "core/graph.py",
    "line_number": 529,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Clear all caches.",
    "parameters": [
      "self"
    ],
    "return_annotation": "None"
  },
  "graph.get_cache_stats": {
    "name": "get_cache_stats",
    "module": "graph",
    "file_path": "core/graph.py",
    "line_number": 536,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get comprehensive cache statistics.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "security_validators.rate_limit_validation": {
    "name": "rate_limit_validation",
    "module": "security_validators",
    "file_path": "core/security_validators.py",
    "line_number": 84,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "\n    Decorator to apply rate limiting to validation functions.\n    \n    Args:\n        func: Function to rate limit\n        \n    Returns:\n        Decorated function with rate limiting\n    ",
    "parameters": [
      "func"
    ],
    "return_annotation": "Callable"
  },
  "security_validators.sanitize_string": {
    "name": "sanitize_string",
    "module": "security_validators",
    "file_path": "core/security_validators.py",
    "line_number": 157,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "\n    Sanitize a string input by removing dangerous content and limiting length.\n\n    Args:\n        value: The string to sanitize\n        max_length: Maximum allowed length\n\n    Returns:\n        Sanitized string\n\n    Raises:\n        SecurityValidationError: If string is too long or contains dangerous patterns\n    ",
    "parameters": [
      "value",
      "max_length"
    ],
    "return_annotation": "str"
  },
  "security_validators.sanitize_description": {
    "name": "sanitize_description",
    "module": "security_validators",
    "file_path": "core/security_validators.py",
    "line_number": 231,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "\n    Sanitize a description field with longer length allowance.\n\n    Args:\n        value: The description to sanitize\n\n    Returns:\n        Sanitized description\n    ",
    "parameters": [
      "value"
    ],
    "return_annotation": "str"
  },
  "security_validators.validate_metadata": {
    "name": "validate_metadata",
    "module": "security_validators",
    "file_path": "core/security_validators.py",
    "line_number": 245,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "\n    Validate and sanitize metadata dictionary.\n\n    Args:\n        metadata: Dictionary to validate\n        max_depth: Maximum nesting depth allowed\n\n    Returns:\n        Sanitized metadata dictionary\n\n    Raises:\n        SecurityValidationError: If metadata fails validation\n    ",
    "parameters": [
      "metadata",
      "max_depth"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "security_validators._sanitize_dict": {
    "name": "_sanitize_dict",
    "module": "security_validators",
    "file_path": "core/security_validators.py",
    "line_number": 283,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "\n    Recursively sanitize dictionary values.\n\n    Args:\n        data: Dictionary to sanitize\n        depth: Current nesting depth\n\n    Returns:\n        Sanitized dictionary\n    ",
    "parameters": [
      "data",
      "depth"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "security_validators._sanitize_list": {
    "name": "_sanitize_list",
    "module": "security_validators",
    "file_path": "core/security_validators.py",
    "line_number": 328,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "\n    Recursively sanitize list values.\n\n    Args:\n        data: List to sanitize\n        depth: Current nesting depth\n\n    Returns:\n        Sanitized list\n    ",
    "parameters": [
      "data",
      "depth"
    ],
    "return_annotation": "List[Any]"
  },
  "security_validators.validate_url": {
    "name": "validate_url",
    "module": "security_validators",
    "file_path": "core/security_validators.py",
    "line_number": 368,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "\n    Validate that a URL is safe and properly formatted.\n\n    Args:\n        url: URL to validate\n\n    Returns:\n        True if URL is valid and safe\n\n    Raises:\n        SecurityValidationError: If URL is invalid or unsafe\n    ",
    "parameters": [
      "url"
    ],
    "return_annotation": "bool"
  },
  "security_validators.validate_node_label": {
    "name": "validate_node_label",
    "module": "security_validators",
    "file_path": "core/security_validators.py",
    "line_number": 427,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "\n    Validate and sanitize a node label.\n\n    Args:\n        label: Label to validate\n\n    Returns:\n        Sanitized label\n    ",
    "parameters": [
      "label"
    ],
    "return_annotation": "str"
  },
  "security_validators.validate_node_description": {
    "name": "validate_node_description",
    "module": "security_validators",
    "file_path": "core/security_validators.py",
    "line_number": 461,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: return\\s+None\\s*$"
    ],
    "docstring": "\n    Validate and sanitize a node description.\n\n    Args:\n        description: Description to validate\n\n    Returns:\n        Sanitized description or None\n    ",
    "parameters": [
      "description"
    ],
    "return_annotation": "Optional[str]"
  },
  "security_validators.validate_and_sanitize_node_data": {
    "name": "validate_and_sanitize_node_data",
    "module": "security_validators",
    "file_path": "core/security_validators.py",
    "line_number": 490,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "\n    Comprehensive validation and sanitization of node data.\n\n    Args:\n        data: Dictionary containing node data\n\n    Returns:\n        Sanitized node data dictionary\n    ",
    "parameters": [
      "data"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "security_validators.set_validation_caller_context": {
    "name": "set_validation_caller_context",
    "module": "security_validators",
    "file_path": "core/security_validators.py",
    "line_number": 541,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "\n    Set caller context for rate limiting validation operations.\n    \n    Args:\n        caller_id: Identifier for the caller (e.g., IP address)\n    ",
    "parameters": [
      "caller_id"
    ],
    "return_annotation": "None"
  },
  "security_validators.get_validation_rate_limit_status": {
    "name": "get_validation_rate_limit_status",
    "module": "security_validators",
    "file_path": "core/security_validators.py",
    "line_number": 552,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "\n    Get current rate limit status for a caller.\n    \n    Args:\n        caller_id: Identifier for the caller (uses current context if not provided)\n        \n    Returns:\n        Dictionary with rate limit status information\n    ",
    "parameters": [
      "caller_id"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "security_validators.disable_validation_rate_limiting": {
    "name": "disable_validation_rate_limiting",
    "module": "security_validators",
    "file_path": "core/security_validators.py",
    "line_number": 583,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "\n    Disable rate limiting for validation operations.\n    Useful for testing environments.\n    ",
    "parameters": [],
    "return_annotation": "None"
  },
  "security_validators.enable_validation_rate_limiting": {
    "name": "enable_validation_rate_limiting",
    "module": "security_validators",
    "file_path": "core/security_validators.py",
    "line_number": 592,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "\n    Enable rate limiting for validation operations.\n    ",
    "parameters": [],
    "return_annotation": "None"
  },
  "security_validators.clear_validation_rate_limit_storage": {
    "name": "clear_validation_rate_limit_storage",
    "module": "security_validators",
    "file_path": "core/security_validators.py",
    "line_number": 600,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "\n    Clear all rate limiting storage.\n    Useful for testing environments.\n    ",
    "parameters": [],
    "return_annotation": "None"
  },
  "security_validators.wrapper": {
    "name": "wrapper",
    "module": "security_validators",
    "file_path": "core/security_validators.py",
    "line_number": 95,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": null,
    "parameters": [],
    "return_annotation": null
  },
  "security_validators.__init__": {
    "name": "__init__",
    "module": "security_validators",
    "file_path": "core/security_validators.py",
    "line_number": 135,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": null,
    "parameters": [
      "self",
      "message",
      "field",
      "value",
      "context"
    ],
    "return_annotation": "None"
  },
  "security_validators.log_failure": {
    "name": "log_failure",
    "module": "security_validators",
    "file_path": "core/security_validators.py",
    "line_number": 144,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Log the security validation failure with full context.",
    "parameters": [
      "self",
      "logger_instance"
    ],
    "return_annotation": "None"
  },
  "specialized_nodes.__post_init__": {
    "name": "__post_init__",
    "module": "specialized_nodes",
    "file_path": "core/specialized_nodes.py",
    "line_number": 120,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Validate policy instrument configuration after initialization.",
    "parameters": [
      "self"
    ],
    "return_annotation": "None"
  },
  "memory_management.capture_current": {
    "name": "capture_current",
    "module": "memory_management",
    "file_path": "core/memory_management.py",
    "line_number": 53,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Capture current system memory usage.",
    "parameters": [
      "cls"
    ],
    "return_annotation": "'MemoryUsageStats'"
  },
  "memory_management.is_over_limit": {
    "name": "is_over_limit",
    "module": "memory_management",
    "file_path": "core/memory_management.py",
    "line_number": 78,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Check if process memory usage exceeds the specified limit.",
    "parameters": [
      "self",
      "limit_mb"
    ],
    "return_annotation": "bool"
  },
  "memory_management.__init__": {
    "name": "__init__",
    "module": "memory_management",
    "file_path": "core/memory_management.py",
    "line_number": 201,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": null,
    "parameters": [
      "self",
      "memory_limit_mb",
      "warning_threshold",
      "critical_threshold",
      "eviction_batch_size"
    ],
    "return_annotation": null
  },
  "memory_management.record_access": {
    "name": "record_access",
    "module": "memory_management",
    "file_path": "core/memory_management.py",
    "line_number": 92,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Record that a node was accessed.",
    "parameters": [
      "self",
      "node_id"
    ],
    "return_annotation": "None"
  },
  "memory_management.get_lru_nodes": {
    "name": "get_lru_nodes",
    "module": "memory_management",
    "file_path": "core/memory_management.py",
    "line_number": 112,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get the least recently used nodes.",
    "parameters": [
      "self",
      "count"
    ],
    "return_annotation": "List[uuid.UUID]"
  },
  "memory_management.get_lfu_nodes": {
    "name": "get_lfu_nodes",
    "module": "memory_management",
    "file_path": "core/memory_management.py",
    "line_number": 116,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get the least frequently used nodes.",
    "parameters": [
      "self",
      "count"
    ],
    "return_annotation": "List[uuid.UUID]"
  },
  "memory_management.get_access_time": {
    "name": "get_access_time",
    "module": "memory_management",
    "file_path": "core/memory_management.py",
    "line_number": 124,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get the last access time for a node.",
    "parameters": [
      "self",
      "node_id"
    ],
    "return_annotation": "Optional[float]"
  },
  "memory_management.get_access_count": {
    "name": "get_access_count",
    "module": "memory_management",
    "file_path": "core/memory_management.py",
    "line_number": 128,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get the access count for a node.",
    "parameters": [
      "self",
      "node_id"
    ],
    "return_annotation": "int"
  },
  "memory_management.remove_node": {
    "name": "remove_node",
    "module": "memory_management",
    "file_path": "core/memory_management.py",
    "line_number": 132,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Remove a node from tracking.",
    "parameters": [
      "self",
      "node_id"
    ],
    "return_annotation": "None"
  },
  "memory_management.get_all_node_ids": {
    "name": "get_all_node_ids",
    "module": "memory_management",
    "file_path": "core/memory_management.py",
    "line_number": 142,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: ^\\s*\\.\\.\\.\\s*$",
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get all node IDs in the graph.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Set[uuid.UUID]"
  },
  "memory_management.remove_node_from_memory": {
    "name": "remove_node_from_memory",
    "module": "memory_management",
    "file_path": "core/memory_management.py",
    "line_number": 146,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: ^\\s*\\.\\.\\.\\s*$",
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Remove a node from memory (but not from persistent storage).",
    "parameters": [
      "self",
      "node_id"
    ],
    "return_annotation": "bool"
  },
  "memory_management.get_node_size_estimate": {
    "name": "get_node_size_estimate",
    "module": "memory_management",
    "file_path": "core/memory_management.py",
    "line_number": 150,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: ^\\s*\\.\\.\\.\\s*$",
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get estimated memory size of a node in bytes.",
    "parameters": [
      "self",
      "node_id"
    ],
    "return_annotation": "int"
  },
  "memory_management.select_nodes_for_eviction": {
    "name": "select_nodes_for_eviction",
    "module": "memory_management",
    "file_path": "core/memory_management.py",
    "line_number": 190,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Select oldest nodes for eviction.",
    "parameters": [
      "self",
      "graph",
      "target_count"
    ],
    "return_annotation": "List[uuid.UUID]"
  },
  "memory_management.current_strategy": {
    "name": "current_strategy",
    "module": "memory_management",
    "file_path": "core/memory_management.py",
    "line_number": 230,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Set the eviction strategy.",
    "parameters": [
      "self",
      "strategy"
    ],
    "return_annotation": null
  },
  "memory_management.record_node_access": {
    "name": "record_node_access",
    "module": "memory_management",
    "file_path": "core/memory_management.py",
    "line_number": 237,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Record that a node was accessed.",
    "parameters": [
      "self",
      "node_id"
    ],
    "return_annotation": "None"
  },
  "memory_management.check_memory_usage": {
    "name": "check_memory_usage",
    "module": "memory_management",
    "file_path": "core/memory_management.py",
    "line_number": 241,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Check current memory usage and return stats.",
    "parameters": [
      "self"
    ],
    "return_annotation": "MemoryUsageStats"
  },
  "memory_management.should_evict_nodes": {
    "name": "should_evict_nodes",
    "module": "memory_management",
    "file_path": "core/memory_management.py",
    "line_number": 245,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Check if node eviction should be triggered.",
    "parameters": [
      "self",
      "memory_stats"
    ],
    "return_annotation": "bool"
  },
  "memory_management.evict_nodes": {
    "name": "evict_nodes",
    "module": "memory_management",
    "file_path": "core/memory_management.py",
    "line_number": 252,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Evict nodes from the graph to free memory.",
    "parameters": [
      "self",
      "graph",
      "force"
    ],
    "return_annotation": "int"
  },
  "memory_management.get_eviction_stats": {
    "name": "get_eviction_stats",
    "module": "memory_management",
    "file_path": "core/memory_management.py",
    "line_number": 290,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get eviction statistics.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Dict[str, any]"
  },
  "sfm_enums.validate_enum_operation": {
    "name": "validate_enum_operation",
    "module": "sfm_enums",
    "file_path": "core/sfm_enums.py",
    "line_number": 3234,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Decorator to validate enum operations and provide better error messages.\n\n    Args:\n        operation_name: Name of the operation being performed\n\n    Returns:\n        Decorator function\n    ",
    "parameters": [
      "operation_name"
    ],
    "return_annotation": "Callable[[Callable[..., Any]], Callable[..., Any]]"
  },
  "sfm_enums.get_core_categories": {
    "name": "get_core_categories",
    "module": "sfm_enums",
    "file_path": "core/sfm_enums.py",
    "line_number": 324,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Return the six core Hayden framework categories.",
    "parameters": [
      "cls"
    ],
    "return_annotation": "Set['ValueCategory']"
  },
  "sfm_enums.get_extended_categories": {
    "name": "get_extended_categories",
    "module": "sfm_enums",
    "file_path": "core/sfm_enums.py",
    "line_number": 330,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Return extended categories beyond core framework.",
    "parameters": [
      "cls"
    ],
    "return_annotation": "Set['ValueCategory']"
  },
  "sfm_enums.ceremonial_tendency": {
    "name": "ceremonial_tendency",
    "module": "sfm_enums",
    "file_path": "core/sfm_enums.py",
    "line_number": 2033,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "\n        Returns a value from 0.0-1.0 indicating ceremonial vs instrumental nature.\n\n        Based on Hayden's SFM framework distinction between ceremonial and instrumental\n        behaviors. 0.0 = purely instrumental (problem-solving, adaptive),\n        1.0 = purely ceremonial (status-preserving, traditional).\n\n        Returns:\n            float: Ceremonial tendency score from 0.0 (instrumental) to 1.0 (ceremonial)\n        ",
    "parameters": [
      "self"
    ],
    "return_annotation": "float"
  },
  "sfm_enums.validate_relationship_context": {
    "name": "validate_relationship_context",
    "module": "sfm_enums",
    "file_path": "core/sfm_enums.py",
    "line_number": 2495,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "Validate that relationship makes sense in context.\n\n        Args:\n            kind: The type of relationship\n            source_type: Type of source node (class name)\n            target_type: Type of target node (class name)\n\n        Raises:\n            IncompatibleEnumError: If relationship doesn't make sense\n            InvalidEnumOperationError: If invalid parameters provided\n        ",
    "parameters": [
      "kind",
      "source_type",
      "target_type"
    ],
    "return_annotation": "None"
  },
  "sfm_enums.validate_flow_combination": {
    "name": "validate_flow_combination",
    "module": "sfm_enums",
    "file_path": "core/sfm_enums.py",
    "line_number": 2531,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "Validate that flow nature and type are compatible.\n\n        Args:\n            nature: The nature of the flow\n            flow_type: The type of the flow\n\n        Raises:\n            IncompatibleEnumError: If flow nature and type are incompatible\n            InvalidEnumOperationError: If invalid parameters provided\n        ",
    "parameters": [
      "nature",
      "flow_type"
    ],
    "return_annotation": "None"
  },
  "sfm_enums.validate_institution_layer_context": {
    "name": "validate_institution_layer_context",
    "module": "sfm_enums",
    "file_path": "core/sfm_enums.py",
    "line_number": 2579,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Validate that institution layer makes sense for the institution type.\n\n        Args:\n            layer: The institutional layer\n            institution_type: Type of institution\n\n        Raises:\n            IncompatibleEnumError: If layer doesn't match institution type\n            InvalidEnumOperationError: If invalid parameters provided\n        ",
    "parameters": [
      "layer",
      "institution_type"
    ],
    "return_annotation": "None"
  },
  "sfm_enums.validate_policy_instrument_combination": {
    "name": "validate_policy_instrument_combination",
    "module": "sfm_enums",
    "file_path": "core/sfm_enums.py",
    "line_number": 2604,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "Validate that policy instrument type is appropriate for target context.\n\n        Args:\n            instrument_type: The type of policy instrument\n            target_context: Context where the instrument is being applied\n\n        Raises:\n            IncompatibleEnumError: If instrument type doesn't match context\n            InvalidEnumOperationError: If invalid parameters provided\n        ",
    "parameters": [
      "instrument_type",
      "target_context"
    ],
    "return_annotation": "None"
  },
  "sfm_enums.validate_value_category_context": {
    "name": "validate_value_category_context",
    "module": "sfm_enums",
    "file_path": "core/sfm_enums.py",
    "line_number": 2641,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "Validate that value category is appropriate for measurement context.\n\n        Args:\n            category: The value category being measured\n            measurement_context: Context of measurement (e.g., 'quantitative', 'qualitative')\n\n        Raises:\n            IncompatibleEnumError: If category doesn't match measurement context\n            InvalidEnumOperationError: If invalid parameters provided\n        ",
    "parameters": [
      "category",
      "measurement_context"
    ],
    "return_annotation": "None"
  },
  "sfm_enums.validate_cross_enum_dependency": {
    "name": "validate_cross_enum_dependency",
    "module": "sfm_enums",
    "file_path": "core/sfm_enums.py",
    "line_number": 2689,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Validate cross-enum dependencies and relationships.\n\n        Args:\n            primary_enum: The primary enum that constrains choices\n            dependent_enum: The dependent enum that must align with primary\n            relationship_type: Type of dependency relationship\n\n        Raises:\n            IncompatibleEnumError: If enums are incompatible\n            InvalidEnumOperationError: If invalid parameters provided\n        ",
    "parameters": [
      "primary_enum",
      "dependent_enum",
      "relationship_type"
    ],
    "return_annotation": "None"
  },
  "sfm_enums.validate_required_enum_context": {
    "name": "validate_required_enum_context",
    "module": "sfm_enums",
    "file_path": "core/sfm_enums.py",
    "line_number": 2732,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: ^\\s*pass\\s*$",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Validate whether an enum is required or optional in given context.\n\n        Args:\n            enum_value: The enum value to validate\n            context: The context where the enum is used\n            is_required: Whether the enum is required in this context\n\n        Raises:\n            InvalidEnumOperationError: If required enum is missing or invalid\n        ",
    "parameters": [
      "enum_value",
      "context",
      "is_required"
    ],
    "return_annotation": "None"
  },
  "sfm_enums.validate_technology_readiness_level": {
    "name": "validate_technology_readiness_level",
    "module": "sfm_enums",
    "file_path": "core/sfm_enums.py",
    "line_number": 2777,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Validate TechnologyReadinessLevel usage in context.\n\n        Args:\n            level: The TRL level to validate\n            context: Context where TRL is being used\n\n        Raises:\n            InvalidEnumOperationError: If invalid parameters provided\n            IncompatibleEnumError: If TRL inappropriate for context\n        ",
    "parameters": [
      "level",
      "context"
    ],
    "return_annotation": "None"
  },
  "sfm_enums.validate_legitimacy_source_context": {
    "name": "validate_legitimacy_source_context",
    "module": "sfm_enums",
    "file_path": "core/sfm_enums.py",
    "line_number": 2816,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: ^\\s*pass\\s*$",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Validate LegitimacySource appropriateness for institutional context.\n\n        Args:\n            source: The legitimacy source to validate\n            institutional_context: Type of institutional context\n\n        Raises:\n            InvalidEnumOperationError: If invalid parameters provided\n            IncompatibleEnumError: If source inappropriate for context\n        ",
    "parameters": [
      "source",
      "institutional_context"
    ],
    "return_annotation": "None"
  },
  "sfm_enums._generate_suggestions": {
    "name": "_generate_suggestions",
    "module": "sfm_enums",
    "file_path": "core/sfm_enums.py",
    "line_number": 2866,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "Generate intelligent, context-aware suggestions for valid combinations.\n        \n        Enhanced suggestion algorithm that provides:\n        - Semantic analysis of relationship types\n        - Entity type compatibility assessment\n        - Context-aware alternative recommendations\n        - SFM-specific business logic guidance\n        ",
    "parameters": [
      "kind",
      "source_type",
      "target_type"
    ],
    "return_annotation": "str"
  },
  "sfm_enums._generate_semantic_suggestions": {
    "name": "_generate_semantic_suggestions",
    "module": "sfm_enums",
    "file_path": "core/sfm_enums.py",
    "line_number": 2911,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Generate suggestions based on semantic analysis of relationship types.",
    "parameters": [
      "kind",
      "source_type",
      "target_type"
    ],
    "return_annotation": "List[str]"
  },
  "sfm_enums._generate_business_logic_suggestions": {
    "name": "_generate_business_logic_suggestions",
    "module": "sfm_enums",
    "file_path": "core/sfm_enums.py",
    "line_number": 2968,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Generate suggestions based on SFM business logic and domain constraints.",
    "parameters": [
      "kind",
      "source_type",
      "target_type"
    ],
    "return_annotation": "List[str]"
  },
  "sfm_enums._generate_entity_compatibility_suggestions": {
    "name": "_generate_entity_compatibility_suggestions",
    "module": "sfm_enums",
    "file_path": "core/sfm_enums.py",
    "line_number": 3004,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Generate suggestions based on entity type compatibility in SFM framework.",
    "parameters": [
      "source_type",
      "target_type"
    ],
    "return_annotation": "List[str]"
  },
  "sfm_enums._get_entity_category": {
    "name": "_get_entity_category",
    "module": "sfm_enums",
    "file_path": "core/sfm_enums.py",
    "line_number": 3028,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Categorize entity types for compatibility analysis.",
    "parameters": [
      "entity_type"
    ],
    "return_annotation": "str"
  },
  "sfm_enums.validate_cross_entity_consistency": {
    "name": "validate_cross_entity_consistency",
    "module": "sfm_enums",
    "file_path": "core/sfm_enums.py",
    "line_number": 3044,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: ^\\s*pass\\s*$",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Validate consistency across multiple entities in SFM framework.\n        \n        This method implements advanced cross-entity validation rules that ensure\n        entities work together coherently within the SFM framework, considering\n        business logic and domain constraints.\n        \n        Args:\n            entity_1_type: Type of first entity\n            entity_2_type: Type of second entity  \n            relationship_kind: The relationship connecting them\n            context: Additional context for validation\n            \n        Raises:\n            IncompatibleEnumError: If entities are inconsistent\n            InvalidEnumOperationError: If invalid parameters provided\n        ",
    "parameters": [
      "entity_1_type",
      "entity_2_type",
      "relationship_kind",
      "context"
    ],
    "return_annotation": "None"
  },
  "sfm_enums.validate_business_rule_constraints": {
    "name": "validate_business_rule_constraints",
    "module": "sfm_enums",
    "file_path": "core/sfm_enums.py",
    "line_number": 3132,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Validate SFM-specific business rules and domain constraints.\n        \n        This method implements domain-specific validation rules based on Hayden's\n        institutional analysis framework and SFM methodology.\n        \n        Args:\n            relationship_kind: The relationship type to validate\n            source_type: Source entity type\n            target_type: Target entity type\n            domain_context: Domain-specific context (e.g., 'environmental', 'economic')\n            \n        Raises:\n            IncompatibleEnumError: If business rules are violated\n            InvalidEnumOperationError: If invalid parameters provided\n        ",
    "parameters": [
      "relationship_kind",
      "source_type",
      "target_type",
      "domain_context"
    ],
    "return_annotation": "None"
  },
  "sfm_enums.decorator": {
    "name": "decorator",
    "module": "sfm_enums",
    "file_path": "core/sfm_enums.py",
    "line_number": 3243,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": null,
    "parameters": [
      "func"
    ],
    "return_annotation": "Callable[..., Any]"
  },
  "sfm_enums.wrapper": {
    "name": "wrapper",
    "module": "sfm_enums",
    "file_path": "core/sfm_enums.py",
    "line_number": 3244,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": null,
    "parameters": [],
    "return_annotation": "Any"
  },
  "lock_manager.get_lock_manager": {
    "name": "get_lock_manager",
    "module": "lock_manager",
    "file_path": "core/lock_manager.py",
    "line_number": 226,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get the global lock manager instance.",
    "parameters": [
      "default_timeout"
    ],
    "return_annotation": "LockManager"
  },
  "lock_manager.reset_lock_manager": {
    "name": "reset_lock_manager",
    "module": "lock_manager",
    "file_path": "core/lock_manager.py",
    "line_number": 234,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Reset the global lock manager (for testing).",
    "parameters": [],
    "return_annotation": "None"
  },
  "lock_manager.__hash__": {
    "name": "__hash__",
    "module": "lock_manager",
    "file_path": "core/lock_manager.py",
    "line_number": 44,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Make LockInfo hashable for use in sets.",
    "parameters": [
      "self"
    ],
    "return_annotation": "int"
  },
  "lock_manager.__eq__": {
    "name": "__eq__",
    "module": "lock_manager",
    "file_path": "core/lock_manager.py",
    "line_number": 48,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Define equality for LockInfo objects.",
    "parameters": [
      "self",
      "other"
    ],
    "return_annotation": "bool"
  },
  "lock_manager.__init__": {
    "name": "__init__",
    "module": "lock_manager",
    "file_path": "core/lock_manager.py",
    "line_number": 66,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "\n        Initialize the lock manager.\n        \n        Args:\n            default_timeout: Default timeout for lock acquisition in seconds\n        ",
    "parameters": [
      "self",
      "default_timeout"
    ],
    "return_annotation": null
  },
  "lock_manager._get_entity_lock": {
    "name": "_get_entity_lock",
    "module": "lock_manager",
    "file_path": "core/lock_manager.py",
    "line_number": 90,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get or create a lock for the specified entity.",
    "parameters": [
      "self",
      "entity_id"
    ],
    "return_annotation": "threading.Lock"
  },
  "lock_manager.lock_entity": {
    "name": "lock_entity",
    "module": "lock_manager",
    "file_path": "core/lock_manager.py",
    "line_number": 98,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "\n        Context manager for entity-level locking.\n        \n        Args:\n            entity_id: UUID of the entity to lock\n            lock_type: Type of lock (READ or WRITE)\n            timeout: Timeout for lock acquisition (uses default if None)\n            \n        Yields:\n            LockInfo: Information about the acquired lock\n            \n        Raises:\n            TimeoutError: If lock cannot be acquired within timeout\n        ",
    "parameters": [
      "self",
      "entity_id",
      "lock_type",
      "timeout"
    ],
    "return_annotation": "Generator[LockInfo, None, None]"
  },
  "lock_manager.get_lock_info": {
    "name": "get_lock_info",
    "module": "lock_manager",
    "file_path": "core/lock_manager.py",
    "line_number": 159,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "\n        Get information about locks for a specific entity.\n        \n        Args:\n            entity_id: UUID of the entity\n            \n        Returns:\n            Dictionary with lock information\n        ",
    "parameters": [
      "self",
      "entity_id"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "lock_manager.get_lock_stats": {
    "name": "get_lock_stats",
    "module": "lock_manager",
    "file_path": "core/lock_manager.py",
    "line_number": 188,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get overall lock manager statistics.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "lock_manager.force_release_all_locks": {
    "name": "force_release_all_locks",
    "module": "lock_manager",
    "file_path": "core/lock_manager.py",
    "line_number": 197,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "\n        Force release all locks (emergency use only).\n        \n        Args:\n            entity_id: If provided, only release locks for this entity\n        ",
    "parameters": [
      "self",
      "entity_id"
    ],
    "return_annotation": "None"
  },
  "core_nodes.__post_init__": {
    "name": "__post_init__",
    "module": "core_nodes",
    "file_path": "core/core_nodes.py",
    "line_number": 107,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Validate flow nature and type combination after initialization.",
    "parameters": [
      "self"
    ],
    "return_annotation": "None"
  },
  "transaction_manager.add_operation": {
    "name": "add_operation",
    "module": "transaction_manager",
    "file_path": "core/transaction_manager.py",
    "line_number": 137,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: return\\s+None\\s*$"
    ],
    "docstring": "\n        Add an operation to the current transaction.\n        \n        Args:\n            operation_type: Type of operation being performed\n            data: Operation data\n            rollback_data: Data needed for rollback\n            rollback_function: Function to call for rollback\n            \n        Returns:\n            Operation ID if in transaction, None otherwise\n        ",
    "parameters": [
      "self",
      "operation_type",
      "data",
      "rollback_data",
      "rollback_function"
    ],
    "return_annotation": "Optional[str]"
  },
  "transaction_manager.duration": {
    "name": "duration",
    "module": "transaction_manager",
    "file_path": "core/transaction_manager.py",
    "line_number": 72,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get transaction duration in seconds.",
    "parameters": [
      "self"
    ],
    "return_annotation": "float"
  },
  "transaction_manager.__init__": {
    "name": "__init__",
    "module": "transaction_manager",
    "file_path": "core/transaction_manager.py",
    "line_number": 81,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": null,
    "parameters": [
      "self"
    ],
    "return_annotation": null
  },
  "transaction_manager.transaction": {
    "name": "transaction",
    "module": "transaction_manager",
    "file_path": "core/transaction_manager.py",
    "line_number": 87,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "\n        Context manager for transactional operations.\n        \n        Args:\n            metadata: Optional metadata for the transaction\n            \n        Yields:\n            TransactionManager: The transaction manager instance\n            \n        Raises:\n            Exception: Re-raises any exception that occurred during transaction\n        ",
    "parameters": [
      "self",
      "metadata"
    ],
    "return_annotation": null
  },
  "transaction_manager._commit_transaction": {
    "name": "_commit_transaction",
    "module": "transaction_manager",
    "file_path": "core/transaction_manager.py",
    "line_number": 158,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Commit a transaction.",
    "parameters": [
      "self",
      "transaction"
    ],
    "return_annotation": null
  },
  "transaction_manager._rollback_transaction": {
    "name": "_rollback_transaction",
    "module": "transaction_manager",
    "file_path": "core/transaction_manager.py",
    "line_number": 164,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Rollback a transaction by reversing operations.",
    "parameters": [
      "self",
      "transaction"
    ],
    "return_annotation": null
  },
  "transaction_manager.get_transaction_stats": {
    "name": "get_transaction_stats",
    "module": "transaction_manager",
    "file_path": "core/transaction_manager.py",
    "line_number": 182,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get transaction statistics.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "transaction_manager.get_current_transaction_id": {
    "name": "get_current_transaction_id",
    "module": "transaction_manager",
    "file_path": "core/transaction_manager.py",
    "line_number": 208,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get the current transaction ID if any.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Optional[str]"
  },
  "transaction_manager.is_in_transaction": {
    "name": "is_in_transaction",
    "module": "transaction_manager",
    "file_path": "core/transaction_manager.py",
    "line_number": 212,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Check if currently in a transaction.",
    "parameters": [
      "self"
    ],
    "return_annotation": "bool"
  },
  "patterns.observer.on_node_added": {
    "name": "on_node_added",
    "module": "patterns.observer",
    "file_path": "core/patterns/observer.py",
    "line_number": 258,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Track node addition metrics.",
    "parameters": [
      "self",
      "node"
    ],
    "return_annotation": "None"
  },
  "patterns.observer.on_node_removed": {
    "name": "on_node_removed",
    "module": "patterns.observer",
    "file_path": "core/patterns/observer.py",
    "line_number": 263,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Track node removal metrics.",
    "parameters": [
      "self",
      "node_id"
    ],
    "return_annotation": "None"
  },
  "patterns.observer.on_node_updated": {
    "name": "on_node_updated",
    "module": "patterns.observer",
    "file_path": "core/patterns/observer.py",
    "line_number": 268,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Track node update metrics.",
    "parameters": [
      "self",
      "node",
      "previous_state"
    ],
    "return_annotation": "None"
  },
  "patterns.observer.on_relationship_added": {
    "name": "on_relationship_added",
    "module": "patterns.observer",
    "file_path": "core/patterns/observer.py",
    "line_number": 273,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Track relationship addition metrics.",
    "parameters": [
      "self",
      "relationship"
    ],
    "return_annotation": "None"
  },
  "patterns.observer.on_relationship_removed": {
    "name": "on_relationship_removed",
    "module": "patterns.observer",
    "file_path": "core/patterns/observer.py",
    "line_number": 278,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Track relationship removal metrics.",
    "parameters": [
      "self",
      "relationship_id"
    ],
    "return_annotation": "None"
  },
  "patterns.observer.on_relationship_updated": {
    "name": "on_relationship_updated",
    "module": "patterns.observer",
    "file_path": "core/patterns/observer.py",
    "line_number": 283,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Track relationship update metrics.",
    "parameters": [
      "self",
      "relationship",
      "previous_state"
    ],
    "return_annotation": "None"
  },
  "patterns.observer.__init__": {
    "name": "__init__",
    "module": "patterns.observer",
    "file_path": "core/patterns/observer.py",
    "line_number": 247,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": null,
    "parameters": [
      "self"
    ],
    "return_annotation": null
  },
  "patterns.observer.add_observer": {
    "name": "add_observer",
    "module": "patterns.observer",
    "file_path": "core/patterns/observer.py",
    "line_number": 64,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Add an observer to be notified of graph changes.",
    "parameters": [
      "self",
      "observer"
    ],
    "return_annotation": "None"
  },
  "patterns.observer.remove_observer": {
    "name": "remove_observer",
    "module": "patterns.observer",
    "file_path": "core/patterns/observer.py",
    "line_number": 69,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Remove an observer from the notification list.",
    "parameters": [
      "self",
      "observer"
    ],
    "return_annotation": "None"
  },
  "patterns.observer.clear_observers": {
    "name": "clear_observers",
    "module": "patterns.observer",
    "file_path": "core/patterns/observer.py",
    "line_number": 74,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Remove all observers.",
    "parameters": [
      "self"
    ],
    "return_annotation": "None"
  },
  "patterns.observer.get_observers": {
    "name": "get_observers",
    "module": "patterns.observer",
    "file_path": "core/patterns/observer.py",
    "line_number": 78,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get a copy of the current observers list.",
    "parameters": [
      "self"
    ],
    "return_annotation": "List[GraphChangeObserver]"
  },
  "patterns.observer._notify_node_added": {
    "name": "_notify_node_added",
    "module": "patterns.observer",
    "file_path": "core/patterns/observer.py",
    "line_number": 82,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": true,
    "issues": [
      "Potentially incomplete - contains: print\\s*\\(",
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Notify all observers that a node was added.",
    "parameters": [
      "self",
      "node"
    ],
    "return_annotation": "None"
  },
  "patterns.observer._notify_node_removed": {
    "name": "_notify_node_removed",
    "module": "patterns.observer",
    "file_path": "core/patterns/observer.py",
    "line_number": 92,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": true,
    "issues": [
      "Potentially incomplete - contains: print\\s*\\(",
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Notify all observers that a node was removed.",
    "parameters": [
      "self",
      "node_id"
    ],
    "return_annotation": "None"
  },
  "patterns.observer._notify_node_updated": {
    "name": "_notify_node_updated",
    "module": "patterns.observer",
    "file_path": "core/patterns/observer.py",
    "line_number": 101,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": true,
    "issues": [
      "Potentially incomplete - contains: print\\s*\\(",
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Notify all observers that a node was updated.",
    "parameters": [
      "self",
      "node",
      "previous_state"
    ],
    "return_annotation": "None"
  },
  "patterns.observer._notify_relationship_added": {
    "name": "_notify_relationship_added",
    "module": "patterns.observer",
    "file_path": "core/patterns/observer.py",
    "line_number": 114,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": true,
    "issues": [
      "Potentially incomplete - contains: print\\s*\\(",
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Notify all observers that a relationship was added.",
    "parameters": [
      "self",
      "relationship"
    ],
    "return_annotation": "None"
  },
  "patterns.observer._notify_relationship_removed": {
    "name": "_notify_relationship_removed",
    "module": "patterns.observer",
    "file_path": "core/patterns/observer.py",
    "line_number": 128,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": true,
    "issues": [
      "Potentially incomplete - contains: print\\s*\\(",
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Notify all observers that a relationship was removed.",
    "parameters": [
      "self",
      "relationship_id"
    ],
    "return_annotation": "None"
  },
  "patterns.observer._notify_relationship_updated": {
    "name": "_notify_relationship_updated",
    "module": "patterns.observer",
    "file_path": "core/patterns/observer.py",
    "line_number": 137,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": true,
    "issues": [
      "Potentially incomplete - contains: print\\s*\\(",
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Notify all observers that a relationship was updated.",
    "parameters": [
      "self",
      "relationship",
      "previous_state"
    ],
    "return_annotation": "None"
  },
  "patterns.observer._record_change": {
    "name": "_record_change",
    "module": "patterns.observer",
    "file_path": "core/patterns/observer.py",
    "line_number": 152,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Record a change in the change history.",
    "parameters": [
      "self",
      "change_type",
      "details"
    ],
    "return_annotation": "None"
  },
  "patterns.observer.get_change_history": {
    "name": "get_change_history",
    "module": "patterns.observer",
    "file_path": "core/patterns/observer.py",
    "line_number": 166,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get the change history, optionally limited to recent changes.",
    "parameters": [
      "self",
      "limit"
    ],
    "return_annotation": "List[Dict[str, Any]]"
  },
  "patterns.observer.clear_change_history": {
    "name": "clear_change_history",
    "module": "patterns.observer",
    "file_path": "core/patterns/observer.py",
    "line_number": 172,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Clear the change history.",
    "parameters": [
      "self"
    ],
    "return_annotation": "None"
  },
  "patterns.observer._invalidate_cache": {
    "name": "_invalidate_cache",
    "module": "patterns.observer",
    "file_path": "core/patterns/observer.py",
    "line_number": 225,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Invalidate a specific cache.",
    "parameters": [
      "self",
      "cache_key"
    ],
    "return_annotation": "None"
  },
  "patterns.observer.get_invalidated_caches": {
    "name": "get_invalidated_caches",
    "module": "patterns.observer",
    "file_path": "core/patterns/observer.py",
    "line_number": 230,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get the list of invalidated caches.",
    "parameters": [
      "self"
    ],
    "return_annotation": "List[str]"
  },
  "patterns.observer.clear_invalidated_caches": {
    "name": "clear_invalidated_caches",
    "module": "patterns.observer",
    "file_path": "core/patterns/observer.py",
    "line_number": 234,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Clear the list of invalidated caches.",
    "parameters": [
      "self"
    ],
    "return_annotation": "None"
  },
  "patterns.observer.get_metrics": {
    "name": "get_metrics",
    "module": "patterns.observer",
    "file_path": "core/patterns/observer.py",
    "line_number": 288,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get current metrics.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "patterns.observer.reset_metrics": {
    "name": "reset_metrics",
    "module": "patterns.observer",
    "file_path": "core/patterns/observer.py",
    "line_number": 292,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Reset all metrics to zero.",
    "parameters": [
      "self"
    ],
    "return_annotation": "None"
  },
  "patterns.command.__init__": {
    "name": "__init__",
    "module": "patterns.command",
    "file_path": "core/patterns/command.py",
    "line_number": 355,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": null,
    "parameters": [
      "self",
      "max_history"
    ],
    "return_annotation": null
  },
  "patterns.command.execute": {
    "name": "execute",
    "module": "patterns.command",
    "file_path": "core/patterns/command.py",
    "line_number": 361,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Execute a command and add it to the history.",
    "parameters": [
      "self",
      "command"
    ],
    "return_annotation": "Any"
  },
  "patterns.command.undo": {
    "name": "undo",
    "module": "patterns.command",
    "file_path": "core/patterns/command.py",
    "line_number": 404,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Undo the last command.",
    "parameters": [
      "self"
    ],
    "return_annotation": "bool"
  },
  "patterns.command.can_undo": {
    "name": "can_undo",
    "module": "patterns.command",
    "file_path": "core/patterns/command.py",
    "line_number": 436,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Check if there are commands that can be undone.",
    "parameters": [
      "self"
    ],
    "return_annotation": "bool"
  },
  "patterns.command.get_description": {
    "name": "get_description",
    "module": "patterns.command",
    "file_path": "core/patterns/command.py",
    "line_number": 342,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get a description of this macro command.",
    "parameters": [
      "self"
    ],
    "return_annotation": "str"
  },
  "patterns.command.redo": {
    "name": "redo",
    "module": "patterns.command",
    "file_path": "core/patterns/command.py",
    "line_number": 420,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Redo the next command.",
    "parameters": [
      "self"
    ],
    "return_annotation": "bool"
  },
  "patterns.command.can_redo": {
    "name": "can_redo",
    "module": "patterns.command",
    "file_path": "core/patterns/command.py",
    "line_number": 442,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Check if there are commands that can be redone.",
    "parameters": [
      "self"
    ],
    "return_annotation": "bool"
  },
  "patterns.command._add_to_history": {
    "name": "_add_to_history",
    "module": "patterns.command",
    "file_path": "core/patterns/command.py",
    "line_number": 447,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Add a command to the history.",
    "parameters": [
      "self",
      "command"
    ],
    "return_annotation": "None"
  },
  "patterns.command.get_history": {
    "name": "get_history",
    "module": "patterns.command",
    "file_path": "core/patterns/command.py",
    "line_number": 461,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get the command history metadata.",
    "parameters": [
      "self"
    ],
    "return_annotation": "List[CommandMetadata]"
  },
  "patterns.command.get_undo_stack": {
    "name": "get_undo_stack",
    "module": "patterns.command",
    "file_path": "core/patterns/command.py",
    "line_number": 466,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get commands that can be undone.",
    "parameters": [
      "self"
    ],
    "return_annotation": "List[CommandMetadata]"
  },
  "patterns.command.get_redo_stack": {
    "name": "get_redo_stack",
    "module": "patterns.command",
    "file_path": "core/patterns/command.py",
    "line_number": 471,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get commands that can be redone.",
    "parameters": [
      "self"
    ],
    "return_annotation": "List[CommandMetadata]"
  },
  "patterns.command.clear_history": {
    "name": "clear_history",
    "module": "patterns.command",
    "file_path": "core/patterns/command.py",
    "line_number": 476,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Clear the command history.",
    "parameters": [
      "self"
    ],
    "return_annotation": "None"
  },
  "patterns.command.get_current_command": {
    "name": "get_current_command",
    "module": "patterns.command",
    "file_path": "core/patterns/command.py",
    "line_number": 482,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: return\\s+None\\s*$",
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get the current command in the history.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Optional[Command]"
  },
  "patterns.command.get_statistics": {
    "name": "get_statistics",
    "module": "patterns.command",
    "file_path": "core/patterns/command.py",
    "line_number": 488,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get statistics about command execution.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "patterns.strategy.get_name": {
    "name": "get_name",
    "module": "patterns.strategy",
    "file_path": "core/patterns/strategy.py",
    "line_number": 318,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": null,
    "parameters": [
      "self"
    ],
    "return_annotation": "str"
  },
  "patterns.strategy.get_description": {
    "name": "get_description",
    "module": "patterns.strategy",
    "file_path": "core/patterns/strategy.py",
    "line_number": 321,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": null,
    "parameters": [
      "self"
    ],
    "return_annotation": "str"
  },
  "patterns.strategy.execute": {
    "name": "execute",
    "module": "patterns.strategy",
    "file_path": "core/patterns/strategy.py",
    "line_number": 339,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Execute the strategy.",
    "parameters": [
      "self",
      "graph",
      "source",
      "target"
    ],
    "return_annotation": "List[List[uuid.UUID]]"
  },
  "patterns.strategy.calculate": {
    "name": "calculate",
    "module": "patterns.strategy",
    "file_path": "core/patterns/strategy.py",
    "line_number": 154,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Calculate degree centrality for a specific node.",
    "parameters": [
      "self",
      "graph",
      "node_id"
    ],
    "return_annotation": "float"
  },
  "patterns.strategy.calculate_all": {
    "name": "calculate_all",
    "module": "patterns.strategy",
    "file_path": "core/patterns/strategy.py",
    "line_number": 162,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Calculate degree centrality for all nodes.",
    "parameters": [
      "self",
      "graph"
    ],
    "return_annotation": "Dict[uuid.UUID, float]"
  },
  "patterns.strategy.detect_communities": {
    "name": "detect_communities",
    "module": "patterns.strategy",
    "file_path": "core/patterns/strategy.py",
    "line_number": 259,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Detect communities using greedy modularity maximization.",
    "parameters": [
      "self",
      "graph"
    ],
    "return_annotation": "Dict[int, List[uuid.UUID]]"
  },
  "patterns.strategy.find_path": {
    "name": "find_path",
    "module": "patterns.strategy",
    "file_path": "core/patterns/strategy.py",
    "line_number": 324,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: return\\s+None\\s*$",
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Find the first shortest path (for compatibility with interface).",
    "parameters": [
      "self",
      "graph",
      "source",
      "target"
    ],
    "return_annotation": "Optional[List[uuid.UUID]]"
  },
  "patterns.strategy.find_all_paths": {
    "name": "find_all_paths",
    "module": "patterns.strategy",
    "file_path": "core/patterns/strategy.py",
    "line_number": 332,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Find all shortest paths between two nodes.",
    "parameters": [
      "self",
      "graph",
      "source",
      "target"
    ],
    "return_annotation": "List[List[uuid.UUID]]"
  },
  "patterns.strategy.__init__": {
    "name": "__init__",
    "module": "patterns.strategy",
    "file_path": "core/patterns/strategy.py",
    "line_number": 514,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": null,
    "parameters": [
      "self",
      "strategy_manager"
    ],
    "return_annotation": null
  },
  "patterns.strategy._register_default_strategies": {
    "name": "_register_default_strategies",
    "module": "patterns.strategy",
    "file_path": "core/patterns/strategy.py",
    "line_number": 368,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Register default strategies for different categories.",
    "parameters": [
      "self"
    ],
    "return_annotation": "None"
  },
  "patterns.strategy.register_strategy": {
    "name": "register_strategy",
    "module": "patterns.strategy",
    "file_path": "core/patterns/strategy.py",
    "line_number": 388,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Register a strategy for a specific category.",
    "parameters": [
      "self",
      "category",
      "strategy"
    ],
    "return_annotation": "None"
  },
  "patterns.strategy.get_strategy": {
    "name": "get_strategy",
    "module": "patterns.strategy",
    "file_path": "core/patterns/strategy.py",
    "line_number": 405,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: return\\s+None\\s*$",
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get a strategy by category and name.",
    "parameters": [
      "self",
      "category",
      "strategy_name"
    ],
    "return_annotation": "Optional[Strategy]"
  },
  "patterns.strategy.set_default_strategy": {
    "name": "set_default_strategy",
    "module": "patterns.strategy",
    "file_path": "core/patterns/strategy.py",
    "line_number": 418,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Set the default strategy for a category.",
    "parameters": [
      "self",
      "category",
      "strategy_name"
    ],
    "return_annotation": "None"
  },
  "patterns.strategy.get_default_strategy": {
    "name": "get_default_strategy",
    "module": "patterns.strategy",
    "file_path": "core/patterns/strategy.py",
    "line_number": 423,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get the default strategy name for a category.",
    "parameters": [
      "self",
      "category"
    ],
    "return_annotation": "Optional[str]"
  },
  "patterns.strategy.list_strategies": {
    "name": "list_strategies",
    "module": "patterns.strategy",
    "file_path": "core/patterns/strategy.py",
    "line_number": 427,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "List all available strategies.",
    "parameters": [
      "self",
      "category"
    ],
    "return_annotation": "Dict[str, List[str]]"
  },
  "patterns.strategy.get_strategy_metadata": {
    "name": "get_strategy_metadata",
    "module": "patterns.strategy",
    "file_path": "core/patterns/strategy.py",
    "line_number": 434,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get metadata for a specific strategy.",
    "parameters": [
      "self",
      "category",
      "strategy_name"
    ],
    "return_annotation": "Optional[StrategyMetadata]"
  },
  "patterns.strategy.execute_strategy": {
    "name": "execute_strategy",
    "module": "patterns.strategy",
    "file_path": "core/patterns/strategy.py",
    "line_number": 439,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Execute a strategy with the given arguments.",
    "parameters": [
      "self",
      "category",
      "strategy_name"
    ],
    "return_annotation": "Any"
  },
  "patterns.strategy.remove_strategy": {
    "name": "remove_strategy",
    "module": "patterns.strategy",
    "file_path": "core/patterns/strategy.py",
    "line_number": 448,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Remove a strategy from the manager.",
    "parameters": [
      "self",
      "category",
      "strategy_name"
    ],
    "return_annotation": "bool"
  },
  "patterns.strategy.clear_strategies": {
    "name": "clear_strategies",
    "module": "patterns.strategy",
    "file_path": "core/patterns/strategy.py",
    "line_number": 473,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Clear all strategies, optionally filtered by category.",
    "parameters": [
      "self",
      "category"
    ],
    "return_annotation": "None"
  },
  "patterns.strategy.get_categories": {
    "name": "get_categories",
    "module": "patterns.strategy",
    "file_path": "core/patterns/strategy.py",
    "line_number": 491,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get all strategy categories.",
    "parameters": [
      "self"
    ],
    "return_annotation": "List[str]"
  },
  "patterns.strategy.get_statistics": {
    "name": "get_statistics",
    "module": "patterns.strategy",
    "file_path": "core/patterns/strategy.py",
    "line_number": 495,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get statistics about registered strategies.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "patterns.strategy.calculate_centrality": {
    "name": "calculate_centrality",
    "module": "patterns.strategy",
    "file_path": "core/patterns/strategy.py",
    "line_number": 517,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "Calculate centrality for a node using the specified strategy.",
    "parameters": [
      "self",
      "graph",
      "node_id",
      "strategy_name"
    ],
    "return_annotation": "float"
  },
  "patterns.strategy.calculate_all_centralities": {
    "name": "calculate_all_centralities",
    "module": "patterns.strategy",
    "file_path": "core/patterns/strategy.py",
    "line_number": 526,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "Calculate centrality for all nodes using the specified strategy.",
    "parameters": [
      "self",
      "graph",
      "strategy_name"
    ],
    "return_annotation": "Dict[uuid.UUID, float]"
  },
  "patterns.strategy.get_available_strategies": {
    "name": "get_available_strategies",
    "module": "patterns.strategy",
    "file_path": "core/patterns/strategy.py",
    "line_number": 535,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get list of available centrality strategies.",
    "parameters": [
      "self"
    ],
    "return_annotation": "List[str]"
  },
  "patterns.strategy.compare_centralities": {
    "name": "compare_centralities",
    "module": "patterns.strategy",
    "file_path": "core/patterns/strategy.py",
    "line_number": 539,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Compare centrality values using different strategies.",
    "parameters": [
      "self",
      "graph",
      "node_id",
      "strategies"
    ],
    "return_annotation": "Dict[str, float]"
  },
  "patterns.decorator.validate_inputs": {
    "name": "validate_inputs",
    "module": "patterns.decorator",
    "file_path": "core/patterns/decorator.py",
    "line_number": 395,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Decorator to validate method inputs.",
    "parameters": [
      "validator"
    ],
    "return_annotation": "Callable[[F], F]"
  },
  "patterns.decorator.cache_result": {
    "name": "cache_result",
    "module": "patterns.decorator",
    "file_path": "core/patterns/decorator.py",
    "line_number": 400,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Decorator to cache method results.",
    "parameters": [
      "ttl",
      "cache_manager"
    ],
    "return_annotation": "Callable[[F], F]"
  },
  "patterns.decorator.audit_operation": {
    "name": "audit_operation",
    "module": "patterns.decorator",
    "file_path": "core/patterns/decorator.py",
    "line_number": 405,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "Decorator to audit operations.",
    "parameters": [
      "level",
      "audit_logger",
      "user_id_provider"
    ],
    "return_annotation": "Callable[[F], F]"
  },
  "patterns.decorator.time_execution": {
    "name": "time_execution",
    "module": "patterns.decorator",
    "file_path": "core/patterns/decorator.py",
    "line_number": 412,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Decorator to time function execution.",
    "parameters": [
      "log_results"
    ],
    "return_annotation": "Callable[[F], F]"
  },
  "patterns.decorator.retry_on_failure": {
    "name": "retry_on_failure",
    "module": "patterns.decorator",
    "file_path": "core/patterns/decorator.py",
    "line_number": 417,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Decorator to retry failed operations.",
    "parameters": [
      "max_retries",
      "delay",
      "backoff_factor",
      "exceptions"
    ],
    "return_annotation": "Callable[[F], F]"
  },
  "patterns.decorator.create_decorator_chain": {
    "name": "create_decorator_chain",
    "module": "patterns.decorator",
    "file_path": "core/patterns/decorator.py",
    "line_number": 438,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Create a decorator chain from multiple decorators.",
    "parameters": [],
    "return_annotation": "DecoratorChain"
  },
  "patterns.decorator.enhanced_operation": {
    "name": "enhanced_operation",
    "module": "patterns.decorator",
    "file_path": "core/patterns/decorator.py",
    "line_number": 444,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "\n    Decorator that combines validation, caching, auditing, and retry logic.\n    \n    This demonstrates how multiple decorators can be composed together.\n    ",
    "parameters": [
      "validator",
      "cache_ttl",
      "audit_level",
      "max_retries"
    ],
    "return_annotation": "Callable[[F], F]"
  },
  "patterns.decorator.get_cache_stats": {
    "name": "get_cache_stats",
    "module": "patterns.decorator",
    "file_path": "core/patterns/decorator.py",
    "line_number": 464,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get statistics from the default cache manager.",
    "parameters": [],
    "return_annotation": "Dict[str, Any]"
  },
  "patterns.decorator.get_audit_entries": {
    "name": "get_audit_entries",
    "module": "patterns.decorator",
    "file_path": "core/patterns/decorator.py",
    "line_number": 469,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get entries from the default audit logger.",
    "parameters": [
      "limit",
      "level"
    ],
    "return_annotation": "List[AuditLogEntry]"
  },
  "patterns.decorator.get_timing_stats": {
    "name": "get_timing_stats",
    "module": "patterns.decorator",
    "file_path": "core/patterns/decorator.py",
    "line_number": 474,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get timing statistics from the default timing decorator.",
    "parameters": [
      "func_name"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "patterns.decorator.clear_all_caches": {
    "name": "clear_all_caches",
    "module": "patterns.decorator",
    "file_path": "core/patterns/decorator.py",
    "line_number": 479,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Clear all caches from the default cache manager.",
    "parameters": [],
    "return_annotation": "None"
  },
  "patterns.decorator.clear_audit_log": {
    "name": "clear_audit_log",
    "module": "patterns.decorator",
    "file_path": "core/patterns/decorator.py",
    "line_number": 484,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Clear the default audit log.",
    "parameters": [],
    "return_annotation": "None"
  },
  "patterns.decorator.validate_non_empty_string": {
    "name": "validate_non_empty_string",
    "module": "patterns.decorator",
    "file_path": "core/patterns/decorator.py",
    "line_number": 490,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Validate that a string field is not empty.",
    "parameters": [
      "obj",
      "field_name",
      "value"
    ],
    "return_annotation": "bool"
  },
  "patterns.decorator.validate_positive_number": {
    "name": "validate_positive_number",
    "module": "patterns.decorator",
    "file_path": "core/patterns/decorator.py",
    "line_number": 495,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Validate that a number is positive.",
    "parameters": [
      "obj",
      "field_name",
      "value"
    ],
    "return_annotation": "bool"
  },
  "patterns.decorator.validate_uuid_format": {
    "name": "validate_uuid_format",
    "module": "patterns.decorator",
    "file_path": "core/patterns/decorator.py",
    "line_number": 500,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Validate that a string is a valid UUID format.",
    "parameters": [
      "obj",
      "field_name",
      "value"
    ],
    "return_annotation": "bool"
  },
  "patterns.decorator.__init__": {
    "name": "__init__",
    "module": "patterns.decorator",
    "file_path": "core/patterns/decorator.py",
    "line_number": 427,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": null,
    "parameters": [
      "self",
      "decorators"
    ],
    "return_annotation": null
  },
  "patterns.decorator.is_expired": {
    "name": "is_expired",
    "module": "patterns.decorator",
    "file_path": "core/patterns/decorator.py",
    "line_number": 37,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Check if the cache entry has expired.",
    "parameters": [
      "self"
    ],
    "return_annotation": "bool"
  },
  "patterns.decorator.access": {
    "name": "access",
    "module": "patterns.decorator",
    "file_path": "core/patterns/decorator.py",
    "line_number": 43,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Access the cached value and update access statistics.",
    "parameters": [
      "self"
    ],
    "return_annotation": "T"
  },
  "patterns.decorator.get": {
    "name": "get",
    "module": "patterns.decorator",
    "file_path": "core/patterns/decorator.py",
    "line_number": 60,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: return\\s+None\\s*$",
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get a value from the cache.",
    "parameters": [
      "self",
      "key"
    ],
    "return_annotation": "Optional[Any]"
  },
  "patterns.decorator.set": {
    "name": "set",
    "module": "patterns.decorator",
    "file_path": "core/patterns/decorator.py",
    "line_number": 75,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Set a value in the cache.",
    "parameters": [
      "self",
      "key",
      "value",
      "ttl"
    ],
    "return_annotation": "None"
  },
  "patterns.decorator.delete": {
    "name": "delete",
    "module": "patterns.decorator",
    "file_path": "core/patterns/decorator.py",
    "line_number": 90,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Delete a key from the cache.",
    "parameters": [
      "self",
      "key"
    ],
    "return_annotation": "bool"
  },
  "patterns.decorator.clear": {
    "name": "clear",
    "module": "patterns.decorator",
    "file_path": "core/patterns/decorator.py",
    "line_number": 198,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Clear all audit log entries.",
    "parameters": [
      "self"
    ],
    "return_annotation": "None"
  },
  "patterns.decorator._cleanup_expired": {
    "name": "_cleanup_expired",
    "module": "patterns.decorator",
    "file_path": "core/patterns/decorator.py",
    "line_number": 103,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Remove expired entries from the cache.",
    "parameters": [
      "self"
    ],
    "return_annotation": "None"
  },
  "patterns.decorator._remove_lru": {
    "name": "_remove_lru",
    "module": "patterns.decorator",
    "file_path": "core/patterns/decorator.py",
    "line_number": 109,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: ^\\s*return\\s*$",
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Remove the least recently used entry.",
    "parameters": [
      "self"
    ],
    "return_annotation": "None"
  },
  "patterns.decorator.get_stats": {
    "name": "get_stats",
    "module": "patterns.decorator",
    "file_path": "core/patterns/decorator.py",
    "line_number": 117,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get cache statistics.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "patterns.decorator.log": {
    "name": "log",
    "module": "patterns.decorator",
    "file_path": "core/patterns/decorator.py",
    "line_number": 163,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "Log an audit entry.",
    "parameters": [
      "self",
      "operation",
      "level",
      "user_id",
      "args",
      "kwargs",
      "result",
      "error",
      "execution_time_ms",
      "metadata"
    ],
    "return_annotation": "None"
  },
  "patterns.decorator.get_entries": {
    "name": "get_entries",
    "module": "patterns.decorator",
    "file_path": "core/patterns/decorator.py",
    "line_number": 186,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get audit log entries.",
    "parameters": [
      "self",
      "limit",
      "level"
    ],
    "return_annotation": "List[AuditLogEntry]"
  },
  "patterns.decorator.__call__": {
    "name": "__call__",
    "module": "patterns.decorator",
    "file_path": "core/patterns/decorator.py",
    "line_number": 430,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Apply all decorators in sequence.",
    "parameters": [
      "self",
      "func"
    ],
    "return_annotation": "F"
  },
  "patterns.decorator._generate_cache_key": {
    "name": "_generate_cache_key",
    "module": "patterns.decorator",
    "file_path": "core/patterns/decorator.py",
    "line_number": 251,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Generate a cache key from function name and arguments.",
    "parameters": [
      "self",
      "func_name",
      "args",
      "kwargs"
    ],
    "return_annotation": "str"
  },
  "patterns.decorator.get_timings": {
    "name": "get_timings",
    "module": "patterns.decorator",
    "file_path": "core/patterns/decorator.py",
    "line_number": 327,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get timing statistics.",
    "parameters": [
      "self",
      "func_name"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "patterns.decorator.wrapper": {
    "name": "wrapper",
    "module": "patterns.decorator",
    "file_path": "core/patterns/decorator.py",
    "line_number": 368,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": null,
    "parameters": [],
    "return_annotation": null
  },
  "patterns.plugin.get_global_plugin_manager": {
    "name": "get_global_plugin_manager",
    "module": "patterns.plugin",
    "file_path": "core/patterns/plugin.py",
    "line_number": 638,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get the global plugin manager instance.",
    "parameters": [],
    "return_annotation": "PluginManager"
  },
  "patterns.plugin.get_metadata": {
    "name": "get_metadata",
    "module": "patterns.plugin",
    "file_path": "core/patterns/plugin.py",
    "line_number": 64,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: ^\\s*pass\\s*$",
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get plugin metadata.",
    "parameters": [
      "self"
    ],
    "return_annotation": "PluginMetadata"
  },
  "patterns.plugin.initialize": {
    "name": "initialize",
    "module": "patterns.plugin",
    "file_path": "core/patterns/plugin.py",
    "line_number": 69,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: ^\\s*pass\\s*$",
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Initialize the plugin with framework context.",
    "parameters": [
      "self",
      "framework_context"
    ],
    "return_annotation": "None"
  },
  "patterns.plugin.cleanup": {
    "name": "cleanup",
    "module": "patterns.plugin",
    "file_path": "core/patterns/plugin.py",
    "line_number": 74,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: ^\\s*pass\\s*$",
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Cleanup plugin resources.",
    "parameters": [
      "self"
    ],
    "return_annotation": "None"
  },
  "patterns.plugin.register_entities": {
    "name": "register_entities",
    "module": "patterns.plugin",
    "file_path": "core/patterns/plugin.py",
    "line_number": 78,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Register custom entity types.",
    "parameters": [
      "self"
    ],
    "return_annotation": "List[Type[Node]]"
  },
  "patterns.plugin.register_relationships": {
    "name": "register_relationships",
    "module": "patterns.plugin",
    "file_path": "core/patterns/plugin.py",
    "line_number": 82,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Register custom relationship kinds.",
    "parameters": [
      "self"
    ],
    "return_annotation": "List[RelationshipKind]"
  },
  "patterns.plugin.register_analyzers": {
    "name": "register_analyzers",
    "module": "patterns.plugin",
    "file_path": "core/patterns/plugin.py",
    "line_number": 86,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Register custom analysis functions.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Dict[str, Callable]"
  },
  "patterns.plugin.register_validators": {
    "name": "register_validators",
    "module": "patterns.plugin",
    "file_path": "core/patterns/plugin.py",
    "line_number": 90,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Register custom validation functions.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Dict[str, Callable]"
  },
  "patterns.plugin.register_event_handlers": {
    "name": "register_event_handlers",
    "module": "patterns.plugin",
    "file_path": "core/patterns/plugin.py",
    "line_number": 94,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Register custom event handlers.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Dict[str, Callable]"
  },
  "patterns.plugin.get_configuration_schema": {
    "name": "get_configuration_schema",
    "module": "patterns.plugin",
    "file_path": "core/patterns/plugin.py",
    "line_number": 98,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get configuration schema for this plugin.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "patterns.plugin.configure": {
    "name": "configure",
    "module": "patterns.plugin",
    "file_path": "core/patterns/plugin.py",
    "line_number": 102,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: ^\\s*pass\\s*$",
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Configure the plugin with settings.",
    "parameters": [
      "self",
      "config"
    ],
    "return_annotation": "None"
  },
  "patterns.plugin.get_health_status": {
    "name": "get_health_status",
    "module": "patterns.plugin",
    "file_path": "core/patterns/plugin.py",
    "line_number": 106,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get health status of the plugin.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "patterns.plugin.get_metrics": {
    "name": "get_metrics",
    "module": "patterns.plugin",
    "file_path": "core/patterns/plugin.py",
    "line_number": 110,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get plugin-specific metrics.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "patterns.plugin.__init__": {
    "name": "__init__",
    "module": "patterns.plugin",
    "file_path": "core/patterns/plugin.py",
    "line_number": 259,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": null,
    "parameters": [
      "self"
    ],
    "return_annotation": null
  },
  "patterns.plugin.register_entity_type": {
    "name": "register_entity_type",
    "module": "patterns.plugin",
    "file_path": "core/patterns/plugin.py",
    "line_number": 126,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Register a custom entity type.",
    "parameters": [
      "self",
      "entity_type",
      "plugin_name"
    ],
    "return_annotation": "None"
  },
  "patterns.plugin.register_relationship_kind": {
    "name": "register_relationship_kind",
    "module": "patterns.plugin",
    "file_path": "core/patterns/plugin.py",
    "line_number": 136,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Register a custom relationship kind.",
    "parameters": [
      "self",
      "relationship_kind",
      "plugin_name"
    ],
    "return_annotation": "None"
  },
  "patterns.plugin.register_analyzer": {
    "name": "register_analyzer",
    "module": "patterns.plugin",
    "file_path": "core/patterns/plugin.py",
    "line_number": 146,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Register a custom analyzer function.",
    "parameters": [
      "self",
      "name",
      "analyzer",
      "plugin_name"
    ],
    "return_annotation": "None"
  },
  "patterns.plugin.register_validator": {
    "name": "register_validator",
    "module": "patterns.plugin",
    "file_path": "core/patterns/plugin.py",
    "line_number": 154,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Register a custom validator function.",
    "parameters": [
      "self",
      "name",
      "validator",
      "plugin_name"
    ],
    "return_annotation": "None"
  },
  "patterns.plugin.register_event_handler": {
    "name": "register_event_handler",
    "module": "patterns.plugin",
    "file_path": "core/patterns/plugin.py",
    "line_number": 162,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Register a custom event handler.",
    "parameters": [
      "self",
      "event_type",
      "handler",
      "plugin_name"
    ],
    "return_annotation": "None"
  },
  "patterns.plugin.get_entity_type": {
    "name": "get_entity_type",
    "module": "patterns.plugin",
    "file_path": "core/patterns/plugin.py",
    "line_number": 170,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get an entity type by name.",
    "parameters": [
      "self",
      "type_name"
    ],
    "return_annotation": "Optional[Type[Node]]"
  },
  "patterns.plugin.get_relationship_kind": {
    "name": "get_relationship_kind",
    "module": "patterns.plugin",
    "file_path": "core/patterns/plugin.py",
    "line_number": 174,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get a relationship kind by name.",
    "parameters": [
      "self",
      "kind_name"
    ],
    "return_annotation": "Optional[RelationshipKind]"
  },
  "patterns.plugin.get_analyzer": {
    "name": "get_analyzer",
    "module": "patterns.plugin",
    "file_path": "core/patterns/plugin.py",
    "line_number": 178,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get an analyzer by name.",
    "parameters": [
      "self",
      "name"
    ],
    "return_annotation": "Optional[Callable]"
  },
  "patterns.plugin.get_validator": {
    "name": "get_validator",
    "module": "patterns.plugin",
    "file_path": "core/patterns/plugin.py",
    "line_number": 182,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get a validator by name.",
    "parameters": [
      "self",
      "name"
    ],
    "return_annotation": "Optional[Callable]"
  },
  "patterns.plugin.get_event_handler": {
    "name": "get_event_handler",
    "module": "patterns.plugin",
    "file_path": "core/patterns/plugin.py",
    "line_number": 186,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get an event handler by event type.",
    "parameters": [
      "self",
      "event_type"
    ],
    "return_annotation": "Optional[Callable]"
  },
  "patterns.plugin.unregister_plugin_resources": {
    "name": "unregister_plugin_resources",
    "module": "patterns.plugin",
    "file_path": "core/patterns/plugin.py",
    "line_number": 190,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Unregister all resources from a specific plugin.",
    "parameters": [
      "self",
      "plugin_name"
    ],
    "return_annotation": "None"
  },
  "patterns.plugin.get_registered_resources": {
    "name": "get_registered_resources",
    "module": "patterns.plugin",
    "file_path": "core/patterns/plugin.py",
    "line_number": 214,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get all registered resources by type.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Dict[str, List[str]]"
  },
  "patterns.plugin.get_plugin_resources": {
    "name": "get_plugin_resources",
    "module": "patterns.plugin",
    "file_path": "core/patterns/plugin.py",
    "line_number": 224,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get all resources registered by a specific plugin.",
    "parameters": [
      "self",
      "plugin_name"
    ],
    "return_annotation": "Dict[str, List[str]]"
  },
  "patterns.plugin.add_plugin_directory": {
    "name": "add_plugin_directory",
    "module": "patterns.plugin",
    "file_path": "core/patterns/plugin.py",
    "line_number": 267,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Add a directory to search for plugins.",
    "parameters": [
      "self",
      "directory"
    ],
    "return_annotation": "None"
  },
  "patterns.plugin.set_framework_context": {
    "name": "set_framework_context",
    "module": "patterns.plugin",
    "file_path": "core/patterns/plugin.py",
    "line_number": 272,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Set the framework context passed to plugins.",
    "parameters": [
      "self",
      "context"
    ],
    "return_annotation": "None"
  },
  "patterns.plugin.discover_plugins": {
    "name": "discover_plugins",
    "module": "patterns.plugin",
    "file_path": "core/patterns/plugin.py",
    "line_number": 276,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Discover plugins in the registered directories.",
    "parameters": [
      "self"
    ],
    "return_annotation": "List[str]"
  },
  "patterns.plugin.load_plugin": {
    "name": "load_plugin",
    "module": "patterns.plugin",
    "file_path": "core/patterns/plugin.py",
    "line_number": 287,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "\n        Load a plugin from file or import path.\n        \n        Args:\n            plugin_name: Name of the plugin\n            plugin_path: Optional path to the plugin file\n            \n        Returns:\n            True if plugin was loaded successfully, False otherwise\n        ",
    "parameters": [
      "self",
      "plugin_name",
      "plugin_path"
    ],
    "return_annotation": "bool"
  },
  "patterns.plugin.activate_plugin": {
    "name": "activate_plugin",
    "module": "patterns.plugin",
    "file_path": "core/patterns/plugin.py",
    "line_number": 370,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "\n        Activate a loaded plugin.\n        \n        Args:\n            plugin_name: Name of the plugin to activate\n            \n        Returns:\n            True if plugin was activated successfully, False otherwise\n        ",
    "parameters": [
      "self",
      "plugin_name"
    ],
    "return_annotation": "bool"
  },
  "patterns.plugin.deactivate_plugin": {
    "name": "deactivate_plugin",
    "module": "patterns.plugin",
    "file_path": "core/patterns/plugin.py",
    "line_number": 418,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "\n        Deactivate an active plugin.\n        \n        Args:\n            plugin_name: Name of the plugin to deactivate\n            \n        Returns:\n            True if plugin was deactivated successfully, False otherwise\n        ",
    "parameters": [
      "self",
      "plugin_name"
    ],
    "return_annotation": "bool"
  },
  "patterns.plugin.unload_plugin": {
    "name": "unload_plugin",
    "module": "patterns.plugin",
    "file_path": "core/patterns/plugin.py",
    "line_number": 455,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "\n        Unload a plugin completely.\n        \n        Args:\n            plugin_name: Name of the plugin to unload\n            \n        Returns:\n            True if plugin was unloaded successfully, False otherwise\n        ",
    "parameters": [
      "self",
      "plugin_name"
    ],
    "return_annotation": "bool"
  },
  "patterns.plugin.get_plugin_info": {
    "name": "get_plugin_info",
    "module": "patterns.plugin",
    "file_path": "core/patterns/plugin.py",
    "line_number": 490,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get information about a specific plugin.",
    "parameters": [
      "self",
      "plugin_name"
    ],
    "return_annotation": "Optional[PluginInfo]"
  },
  "patterns.plugin.list_plugins": {
    "name": "list_plugins",
    "module": "patterns.plugin",
    "file_path": "core/patterns/plugin.py",
    "line_number": 494,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "List all plugins, optionally filtered by status.",
    "parameters": [
      "self",
      "status"
    ],
    "return_annotation": "List[PluginInfo]"
  },
  "patterns.plugin.get_plugin_registry": {
    "name": "get_plugin_registry",
    "module": "patterns.plugin",
    "file_path": "core/patterns/plugin.py",
    "line_number": 503,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get the plugin registry.",
    "parameters": [
      "self"
    ],
    "return_annotation": "PluginRegistry"
  },
  "patterns.plugin.configure_plugin": {
    "name": "configure_plugin",
    "module": "patterns.plugin",
    "file_path": "core/patterns/plugin.py",
    "line_number": 507,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Configure a plugin with settings.",
    "parameters": [
      "self",
      "plugin_name",
      "config"
    ],
    "return_annotation": "bool"
  },
  "patterns.plugin.get_plugin_health": {
    "name": "get_plugin_health",
    "module": "patterns.plugin",
    "file_path": "core/patterns/plugin.py",
    "line_number": 525,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: return\\s+None\\s*$",
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get health status of a plugin.",
    "parameters": [
      "self",
      "plugin_name"
    ],
    "return_annotation": "Optional[Dict[str, Any]]"
  },
  "patterns.plugin.get_plugin_metrics": {
    "name": "get_plugin_metrics",
    "module": "patterns.plugin",
    "file_path": "core/patterns/plugin.py",
    "line_number": 540,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: return\\s+None\\s*$",
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get metrics from a plugin.",
    "parameters": [
      "self",
      "plugin_name"
    ],
    "return_annotation": "Optional[Dict[str, Any]]"
  },
  "patterns.plugin._check_dependencies": {
    "name": "_check_dependencies",
    "module": "patterns.plugin",
    "file_path": "core/patterns/plugin.py",
    "line_number": 555,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Check if all dependencies are satisfied.",
    "parameters": [
      "self",
      "dependencies"
    ],
    "return_annotation": "bool"
  },
  "patterns.plugin._calculate_initialization_order": {
    "name": "_calculate_initialization_order",
    "module": "patterns.plugin",
    "file_path": "core/patterns/plugin.py",
    "line_number": 567,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: ^\\s*return\\s*$",
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Calculate plugin initialization order based on dependencies.",
    "parameters": [
      "self"
    ],
    "return_annotation": "List[str]"
  },
  "patterns.plugin.activate_all_plugins": {
    "name": "activate_all_plugins",
    "module": "patterns.plugin",
    "file_path": "core/patterns/plugin.py",
    "line_number": 598,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Activate all loaded plugins in dependency order.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Dict[str, bool]"
  },
  "patterns.plugin.get_statistics": {
    "name": "get_statistics",
    "module": "patterns.plugin",
    "file_path": "core/patterns/plugin.py",
    "line_number": 620,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get plugin manager statistics.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "patterns.plugin.visit": {
    "name": "visit",
    "module": "patterns.plugin",
    "file_path": "core/patterns/plugin.py",
    "line_number": 574,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: ^\\s*return\\s*$"
    ],
    "docstring": null,
    "parameters": [
      "plugin_name"
    ],
    "return_annotation": null
  },
  "patterns.dependency_injection.get_global_container": {
    "name": "get_global_container",
    "module": "patterns.dependency_injection",
    "file_path": "core/patterns/dependency_injection.py",
    "line_number": 646,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get the global DI container instance.",
    "parameters": [],
    "return_annotation": "DIContainer"
  },
  "patterns.dependency_injection.inject": {
    "name": "inject",
    "module": "patterns.dependency_injection",
    "file_path": "core/patterns/dependency_injection.py",
    "line_number": 651,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Inject a service from the global container.",
    "parameters": [
      "service_type"
    ],
    "return_annotation": "T"
  },
  "patterns.dependency_injection.configure_global_container": {
    "name": "configure_global_container",
    "module": "patterns.dependency_injection",
    "file_path": "core/patterns/dependency_injection.py",
    "line_number": 656,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Configure the global container.",
    "parameters": [
      "configurator"
    ],
    "return_annotation": "None"
  },
  "patterns.dependency_injection.example_configuration": {
    "name": "example_configuration",
    "module": "patterns.dependency_injection",
    "file_path": "core/patterns/dependency_injection.py",
    "line_number": 689,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": true,
    "issues": [
      "Potentially incomplete - contains: print\\s*\\(",
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Example of how to configure the DI container.",
    "parameters": [],
    "return_annotation": null
  },
  "patterns.dependency_injection.__init__": {
    "name": "__init__",
    "module": "patterns.dependency_injection",
    "file_path": "core/patterns/dependency_injection.py",
    "line_number": 680,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": null,
    "parameters": [
      "self",
      "service_a",
      "service_b"
    ],
    "return_annotation": null
  },
  "patterns.dependency_injection.get_service": {
    "name": "get_service",
    "module": "patterns.dependency_injection",
    "file_path": "core/patterns/dependency_injection.py",
    "line_number": 62,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get a service within this scope.",
    "parameters": [
      "self",
      "service_type"
    ],
    "return_annotation": "T"
  },
  "patterns.dependency_injection.dispose": {
    "name": "dispose",
    "module": "patterns.dependency_injection",
    "file_path": "core/patterns/dependency_injection.py",
    "line_number": 75,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: ^\\s*return\\s*$",
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Dispose of all services in this scope.",
    "parameters": [
      "self"
    ],
    "return_annotation": "None"
  },
  "patterns.dependency_injection.register_singleton": {
    "name": "register_singleton",
    "module": "patterns.dependency_injection",
    "file_path": "core/patterns/dependency_injection.py",
    "line_number": 127,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Register a singleton instance.",
    "parameters": [
      "self",
      "service_type",
      "instance"
    ],
    "return_annotation": "'DIContainer'"
  },
  "patterns.dependency_injection.register_transient": {
    "name": "register_transient",
    "module": "patterns.dependency_injection",
    "file_path": "core/patterns/dependency_injection.py",
    "line_number": 148,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "Register a transient service (new instance every time).",
    "parameters": [
      "self",
      "service_type",
      "implementation_type"
    ],
    "return_annotation": "'DIContainer'"
  },
  "patterns.dependency_injection.register_scoped": {
    "name": "register_scoped",
    "module": "patterns.dependency_injection",
    "file_path": "core/patterns/dependency_injection.py",
    "line_number": 174,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "Register a scoped service (single instance per scope).",
    "parameters": [
      "self",
      "service_type",
      "implementation_type"
    ],
    "return_annotation": "'DIContainer'"
  },
  "patterns.dependency_injection.register_factory": {
    "name": "register_factory",
    "module": "patterns.dependency_injection",
    "file_path": "core/patterns/dependency_injection.py",
    "line_number": 200,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "Register a factory function for creating services.",
    "parameters": [
      "self",
      "service_type",
      "factory",
      "lifecycle"
    ],
    "return_annotation": "'DIContainer'"
  },
  "patterns.dependency_injection.register_instance": {
    "name": "register_instance",
    "module": "patterns.dependency_injection",
    "file_path": "core/patterns/dependency_injection.py",
    "line_number": 226,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Register a specific instance.",
    "parameters": [
      "self",
      "service_type",
      "instance",
      "lifecycle"
    ],
    "return_annotation": "'DIContainer'"
  },
  "patterns.dependency_injection.get": {
    "name": "get",
    "module": "patterns.dependency_injection",
    "file_path": "core/patterns/dependency_injection.py",
    "line_number": 251,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get a service instance.",
    "parameters": [
      "self",
      "service_type"
    ],
    "return_annotation": "T"
  },
  "patterns.dependency_injection.try_get": {
    "name": "try_get",
    "module": "patterns.dependency_injection",
    "file_path": "core/patterns/dependency_injection.py",
    "line_number": 256,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: return\\s+None\\s*$",
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Try to get a service instance, return None if not found.",
    "parameters": [
      "self",
      "service_type"
    ],
    "return_annotation": "Optional[T]"
  },
  "patterns.dependency_injection._get_service": {
    "name": "_get_service",
    "module": "patterns.dependency_injection",
    "file_path": "core/patterns/dependency_injection.py",
    "line_number": 263,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Internal method to get a service instance.",
    "parameters": [
      "self",
      "service_type",
      "scope"
    ],
    "return_annotation": "T"
  },
  "patterns.dependency_injection._create_service": {
    "name": "_create_service",
    "module": "patterns.dependency_injection",
    "file_path": "core/patterns/dependency_injection.py",
    "line_number": 305,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Create a new service instance.",
    "parameters": [
      "self",
      "service_type",
      "scope"
    ],
    "return_annotation": "T"
  },
  "patterns.dependency_injection._create_instance": {
    "name": "_create_instance",
    "module": "patterns.dependency_injection",
    "file_path": "core/patterns/dependency_injection.py",
    "line_number": 350,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: ^\\s*pass\\s*$",
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Create an instance by invoking the constructor with dependencies.",
    "parameters": [
      "self",
      "implementation_type",
      "scope"
    ],
    "return_annotation": "T"
  },
  "patterns.dependency_injection._invoke_factory": {
    "name": "_invoke_factory",
    "module": "patterns.dependency_injection",
    "file_path": "core/patterns/dependency_injection.py",
    "line_number": 398,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: ^\\s*pass\\s*$",
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Invoke a factory function with dependency injection.",
    "parameters": [
      "self",
      "factory",
      "scope"
    ],
    "return_annotation": "Any"
  },
  "patterns.dependency_injection._analyze_dependencies": {
    "name": "_analyze_dependencies",
    "module": "patterns.dependency_injection",
    "file_path": "core/patterns/dependency_injection.py",
    "line_number": 441,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Analyze dependencies of a service type.",
    "parameters": [
      "self",
      "service_type"
    ],
    "return_annotation": "List[Type]"
  },
  "patterns.dependency_injection._analyze_factory_dependencies": {
    "name": "_analyze_factory_dependencies",
    "module": "patterns.dependency_injection",
    "file_path": "core/patterns/dependency_injection.py",
    "line_number": 466,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Analyze dependencies of a factory function.",
    "parameters": [
      "self",
      "factory"
    ],
    "return_annotation": "List[Type]"
  },
  "patterns.dependency_injection._apply_interceptors": {
    "name": "_apply_interceptors",
    "module": "patterns.dependency_injection",
    "file_path": "core/patterns/dependency_injection.py",
    "line_number": 487,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Apply interceptors to a service instance.",
    "parameters": [
      "self",
      "service_type",
      "instance"
    ],
    "return_annotation": "Any"
  },
  "patterns.dependency_injection._emit_event": {
    "name": "_emit_event",
    "module": "patterns.dependency_injection",
    "file_path": "core/patterns/dependency_injection.py",
    "line_number": 493,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Emit an event to registered handlers.",
    "parameters": [
      "self",
      "event_name",
      "data"
    ],
    "return_annotation": "None"
  },
  "patterns.dependency_injection.add_interceptor": {
    "name": "add_interceptor",
    "module": "patterns.dependency_injection",
    "file_path": "core/patterns/dependency_injection.py",
    "line_number": 502,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Add an interceptor to modify service instances.",
    "parameters": [
      "self",
      "interceptor"
    ],
    "return_annotation": "'DIContainer'"
  },
  "patterns.dependency_injection.add_decorator": {
    "name": "add_decorator",
    "module": "patterns.dependency_injection",
    "file_path": "core/patterns/dependency_injection.py",
    "line_number": 507,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Add a decorator to modify service instances.",
    "parameters": [
      "self",
      "decorator"
    ],
    "return_annotation": "'DIContainer'"
  },
  "patterns.dependency_injection.add_middleware": {
    "name": "add_middleware",
    "module": "patterns.dependency_injection",
    "file_path": "core/patterns/dependency_injection.py",
    "line_number": 512,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Add middleware to modify service creation context.",
    "parameters": [
      "self",
      "middleware"
    ],
    "return_annotation": "'DIContainer'"
  },
  "patterns.dependency_injection.add_event_handler": {
    "name": "add_event_handler",
    "module": "patterns.dependency_injection",
    "file_path": "core/patterns/dependency_injection.py",
    "line_number": 517,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Add an event handler.",
    "parameters": [
      "self",
      "event_name",
      "handler"
    ],
    "return_annotation": "'DIContainer'"
  },
  "patterns.dependency_injection.create_scope": {
    "name": "create_scope",
    "module": "patterns.dependency_injection",
    "file_path": "core/patterns/dependency_injection.py",
    "line_number": 524,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Create a new service scope.",
    "parameters": [
      "self"
    ],
    "return_annotation": "ServiceScope"
  },
  "patterns.dependency_injection.scope": {
    "name": "scope",
    "module": "patterns.dependency_injection",
    "file_path": "core/patterns/dependency_injection.py",
    "line_number": 529,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Context manager for service scopes.",
    "parameters": [
      "self"
    ],
    "return_annotation": null
  },
  "patterns.dependency_injection.is_registered": {
    "name": "is_registered",
    "module": "patterns.dependency_injection",
    "file_path": "core/patterns/dependency_injection.py",
    "line_number": 537,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Check if a service type is registered.",
    "parameters": [
      "self",
      "service_type"
    ],
    "return_annotation": "bool"
  },
  "patterns.dependency_injection.get_service_info": {
    "name": "get_service_info",
    "module": "patterns.dependency_injection",
    "file_path": "core/patterns/dependency_injection.py",
    "line_number": 541,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get information about a registered service.",
    "parameters": [
      "self",
      "service_type"
    ],
    "return_annotation": "Optional[ServiceDescriptor]"
  },
  "patterns.dependency_injection.list_services": {
    "name": "list_services",
    "module": "patterns.dependency_injection",
    "file_path": "core/patterns/dependency_injection.py",
    "line_number": 545,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "List all registered services.",
    "parameters": [
      "self"
    ],
    "return_annotation": "List[ServiceDescriptor]"
  },
  "patterns.dependency_injection.unregister": {
    "name": "unregister",
    "module": "patterns.dependency_injection",
    "file_path": "core/patterns/dependency_injection.py",
    "line_number": 549,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Unregister a service type.",
    "parameters": [
      "self",
      "service_type"
    ],
    "return_annotation": "bool"
  },
  "patterns.dependency_injection.clear": {
    "name": "clear",
    "module": "patterns.dependency_injection",
    "file_path": "core/patterns/dependency_injection.py",
    "line_number": 566,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Clear all registered services.",
    "parameters": [
      "self"
    ],
    "return_annotation": "None"
  },
  "patterns.dependency_injection.validate_configuration": {
    "name": "validate_configuration",
    "module": "patterns.dependency_injection",
    "file_path": "core/patterns/dependency_injection.py",
    "line_number": 584,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Validate the container configuration and return any issues.",
    "parameters": [
      "self"
    ],
    "return_annotation": "List[str]"
  },
  "patterns.dependency_injection._check_circular_dependencies": {
    "name": "_check_circular_dependencies",
    "module": "patterns.dependency_injection",
    "file_path": "core/patterns/dependency_injection.py",
    "line_number": 605,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: ^\\s*return\\s*$",
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Check for circular dependencies starting from a service type.",
    "parameters": [
      "self",
      "service_type",
      "visited"
    ],
    "return_annotation": "None"
  },
  "patterns.dependency_injection.get_metrics": {
    "name": "get_metrics",
    "module": "patterns.dependency_injection",
    "file_path": "core/patterns/dependency_injection.py",
    "line_number": 619,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get container metrics.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "patterns.dependency_injection.get_dependency_graph": {
    "name": "get_dependency_graph",
    "module": "patterns.dependency_injection",
    "file_path": "core/patterns/dependency_injection.py",
    "line_number": 631,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get the dependency graph as a dictionary.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Dict[str, List[str]]"
  },
  "patterns.dependency_injection.do_something": {
    "name": "do_something",
    "module": "patterns.dependency_injection",
    "file_path": "core/patterns/dependency_injection.py",
    "line_number": 685,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": null,
    "parameters": [
      "self"
    ],
    "return_annotation": null
  },
  "patterns.dependency_injection.logging_interceptor": {
    "name": "logging_interceptor",
    "module": "patterns.dependency_injection",
    "file_path": "core/patterns/dependency_injection.py",
    "line_number": 706,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": true,
    "issues": [
      "Potentially incomplete - contains: print\\s*\\(",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": null,
    "parameters": [
      "service_type",
      "instance"
    ],
    "return_annotation": "Any"
  },
  "patterns.event_bus.event_enrichment_middleware": {
    "name": "event_enrichment_middleware",
    "module": "patterns.event_bus",
    "file_path": "core/patterns/event_bus.py",
    "line_number": 559,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Middleware that enriches events with additional metadata.",
    "parameters": [
      "event"
    ],
    "return_annotation": "Event"
  },
  "patterns.event_bus.event_filtering_middleware": {
    "name": "event_filtering_middleware",
    "module": "patterns.event_bus",
    "file_path": "core/patterns/event_bus.py",
    "line_number": 566,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: return\\s+None\\s*$",
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Middleware that filters out certain events.",
    "parameters": [
      "event"
    ],
    "return_annotation": "Optional[Event]"
  },
  "patterns.event_bus.event_transformation_middleware": {
    "name": "event_transformation_middleware",
    "module": "patterns.event_bus",
    "file_path": "core/patterns/event_bus.py",
    "line_number": 574,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Middleware that transforms event data.",
    "parameters": [
      "event"
    ],
    "return_annotation": "Event"
  },
  "patterns.event_bus.get_global_event_bus": {
    "name": "get_global_event_bus",
    "module": "patterns.event_bus",
    "file_path": "core/patterns/event_bus.py",
    "line_number": 585,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get the global event bus instance.",
    "parameters": [],
    "return_annotation": "EventBus"
  },
  "patterns.event_bus.publish_event": {
    "name": "publish_event",
    "module": "patterns.event_bus",
    "file_path": "core/patterns/event_bus.py",
    "line_number": 590,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Convenience function to publish an event to the global event bus.",
    "parameters": [
      "event_type",
      "data"
    ],
    "return_annotation": "None"
  },
  "patterns.event_bus.subscribe_to_event": {
    "name": "subscribe_to_event",
    "module": "patterns.event_bus",
    "file_path": "core/patterns/event_bus.py",
    "line_number": 596,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Convenience function to subscribe to an event on the global event bus.",
    "parameters": [
      "event_type",
      "handler",
      "priority"
    ],
    "return_annotation": "str"
  },
  "patterns.event_bus.__post_init__": {
    "name": "__post_init__",
    "module": "patterns.event_bus",
    "file_path": "core/patterns/event_bus.py",
    "line_number": 45,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Validate event data after initialization.",
    "parameters": [
      "self"
    ],
    "return_annotation": null
  },
  "patterns.event_bus.handle": {
    "name": "handle",
    "module": "patterns.event_bus",
    "file_path": "core/patterns/event_bus.py",
    "line_number": 544,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Invalidate caches based on event type.",
    "parameters": [
      "self",
      "event"
    ],
    "return_annotation": "None"
  },
  "patterns.event_bus.get_handler_id": {
    "name": "get_handler_id",
    "module": "patterns.event_bus",
    "file_path": "core/patterns/event_bus.py",
    "line_number": 81,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get a unique identifier for this handler.",
    "parameters": [
      "self"
    ],
    "return_annotation": "str"
  },
  "patterns.event_bus.get_supported_event_types": {
    "name": "get_supported_event_types",
    "module": "patterns.event_bus",
    "file_path": "core/patterns/event_bus.py",
    "line_number": 553,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Supported event types for cache invalidation.",
    "parameters": [
      "self"
    ],
    "return_annotation": "List[str]"
  },
  "patterns.event_bus.get_priority": {
    "name": "get_priority",
    "module": "patterns.event_bus",
    "file_path": "core/patterns/event_bus.py",
    "line_number": 89,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get the priority of this handler (higher numbers = higher priority).",
    "parameters": [
      "self"
    ],
    "return_annotation": "int"
  },
  "patterns.event_bus.__init__": {
    "name": "__init__",
    "module": "patterns.event_bus",
    "file_path": "core/patterns/event_bus.py",
    "line_number": 541,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": null,
    "parameters": [
      "self"
    ],
    "return_annotation": null
  },
  "patterns.event_bus.subscribe": {
    "name": "subscribe",
    "module": "patterns.event_bus",
    "file_path": "core/patterns/event_bus.py",
    "line_number": 134,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [],
    "docstring": "\n        Subscribe a handler to an event type.\n        \n        Args:\n            event_type: The type of event to subscribe to\n            handler: The handler to invoke when the event occurs\n            priority: Handler priority (higher numbers execute first)\n            \n        Returns:\n            Handler ID for later removal\n        ",
    "parameters": [
      "self",
      "event_type",
      "handler",
      "priority"
    ],
    "return_annotation": "str"
  },
  "patterns.event_bus.subscribe_to_all": {
    "name": "subscribe_to_all",
    "module": "patterns.event_bus",
    "file_path": "core/patterns/event_bus.py",
    "line_number": 174,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "\n        Subscribe a handler to all events (wildcard subscription).\n        \n        Args:\n            handler: The handler to invoke for all events\n            \n        Returns:\n            Handler ID for later removal\n        ",
    "parameters": [
      "self",
      "handler"
    ],
    "return_annotation": "str"
  },
  "patterns.event_bus.unsubscribe": {
    "name": "unsubscribe",
    "module": "patterns.event_bus",
    "file_path": "core/patterns/event_bus.py",
    "line_number": 204,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "\n        Unsubscribe a handler from an event type.\n        \n        Args:\n            event_type: The event type to unsubscribe from\n            handler_id: The ID of the handler to remove\n            \n        Returns:\n            True if handler was found and removed, False otherwise\n        ",
    "parameters": [
      "self",
      "event_type",
      "handler_id"
    ],
    "return_annotation": "bool"
  },
  "patterns.event_bus.publish": {
    "name": "publish",
    "module": "patterns.event_bus",
    "file_path": "core/patterns/event_bus.py",
    "line_number": 240,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: ^\\s*return\\s*$"
    ],
    "docstring": "\n        Publish an event to all registered handlers.\n        \n        Args:\n            event: The event to publish\n        ",
    "parameters": [
      "self",
      "event"
    ],
    "return_annotation": "None"
  },
  "patterns.event_bus.stop_async_processing": {
    "name": "stop_async_processing",
    "module": "patterns.event_bus",
    "file_path": "core/patterns/event_bus.py",
    "line_number": 305,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Stop asynchronous event processing.",
    "parameters": [
      "self"
    ],
    "return_annotation": "None"
  },
  "patterns.event_bus._process_event_sync": {
    "name": "_process_event_sync",
    "module": "patterns.event_bus",
    "file_path": "core/patterns/event_bus.py",
    "line_number": 309,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Process an event synchronously.",
    "parameters": [
      "self",
      "event"
    ],
    "return_annotation": "None"
  },
  "patterns.event_bus._get_handlers_for_event": {
    "name": "_get_handlers_for_event",
    "module": "patterns.event_bus",
    "file_path": "core/patterns/event_bus.py",
    "line_number": 376,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get all handlers that should process this event.",
    "parameters": [
      "self",
      "event"
    ],
    "return_annotation": "List[EventHandler]"
  },
  "patterns.event_bus._apply_filters": {
    "name": "_apply_filters",
    "module": "patterns.event_bus",
    "file_path": "core/patterns/event_bus.py",
    "line_number": 392,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Apply filters to determine if event should be processed.",
    "parameters": [
      "self",
      "event"
    ],
    "return_annotation": "bool"
  },
  "patterns.event_bus._apply_middleware": {
    "name": "_apply_middleware",
    "module": "patterns.event_bus",
    "file_path": "core/patterns/event_bus.py",
    "line_number": 402,
    "is_stub": true,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Stub method - matches pattern: return\\s+None\\s*$",
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Apply middleware to transform or filter events.",
    "parameters": [
      "self",
      "event"
    ],
    "return_annotation": "Optional[Event]"
  },
  "patterns.event_bus._handle_error": {
    "name": "_handle_error",
    "module": "patterns.event_bus",
    "file_path": "core/patterns/event_bus.py",
    "line_number": 417,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Handle errors from event handlers.",
    "parameters": [
      "self",
      "error",
      "event",
      "handler"
    ],
    "return_annotation": "None"
  },
  "patterns.event_bus._update_handler_metadata": {
    "name": "_update_handler_metadata",
    "module": "patterns.event_bus",
    "file_path": "core/patterns/event_bus.py",
    "line_number": 427,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Update handler metadata with execution information.",
    "parameters": [
      "self",
      "handler",
      "error",
      "start_time"
    ],
    "return_annotation": "None"
  },
  "patterns.event_bus._add_to_history": {
    "name": "_add_to_history",
    "module": "patterns.event_bus",
    "file_path": "core/patterns/event_bus.py",
    "line_number": 441,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Add event to history with size limit.",
    "parameters": [
      "self",
      "event"
    ],
    "return_annotation": "None"
  },
  "patterns.event_bus.add_middleware": {
    "name": "add_middleware",
    "module": "patterns.event_bus",
    "file_path": "core/patterns/event_bus.py",
    "line_number": 448,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Add middleware to process events before they reach handlers.",
    "parameters": [
      "self",
      "middleware"
    ],
    "return_annotation": "None"
  },
  "patterns.event_bus.add_error_handler": {
    "name": "add_error_handler",
    "module": "patterns.event_bus",
    "file_path": "core/patterns/event_bus.py",
    "line_number": 452,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Add error handler to process exceptions from event handlers.",
    "parameters": [
      "self",
      "error_handler"
    ],
    "return_annotation": "None"
  },
  "patterns.event_bus.add_filter": {
    "name": "add_filter",
    "module": "patterns.event_bus",
    "file_path": "core/patterns/event_bus.py",
    "line_number": 456,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Add filter to determine which events should be processed.",
    "parameters": [
      "self",
      "filter_func"
    ],
    "return_annotation": "None"
  },
  "patterns.event_bus.get_event_history": {
    "name": "get_event_history",
    "module": "patterns.event_bus",
    "file_path": "core/patterns/event_bus.py",
    "line_number": 460,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get event history.",
    "parameters": [
      "self",
      "limit"
    ],
    "return_annotation": "List[Event]"
  },
  "patterns.event_bus.get_handler_metadata": {
    "name": "get_handler_metadata",
    "module": "patterns.event_bus",
    "file_path": "core/patterns/event_bus.py",
    "line_number": 466,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Get metadata for handlers.",
    "parameters": [
      "self",
      "handler_id"
    ],
    "return_annotation": "Union[EventHandlerMetadata, List[EventHandlerMetadata]]"
  },
  "patterns.event_bus.get_metrics": {
    "name": "get_metrics",
    "module": "patterns.event_bus",
    "file_path": "core/patterns/event_bus.py",
    "line_number": 530,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": false,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis"
    ],
    "docstring": "Get collected metrics.",
    "parameters": [
      "self"
    ],
    "return_annotation": "Dict[str, Any]"
  },
  "patterns.event_bus.clear_history": {
    "name": "clear_history",
    "module": "patterns.event_bus",
    "file_path": "core/patterns/event_bus.py",
    "line_number": 484,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Clear event history.",
    "parameters": [
      "self"
    ],
    "return_annotation": "None"
  },
  "patterns.event_bus.clear_handlers": {
    "name": "clear_handlers",
    "module": "patterns.event_bus",
    "file_path": "core/patterns/event_bus.py",
    "line_number": 488,
    "is_stub": false,
    "is_partially_implemented": false,
    "is_unused": true,
    "is_incomplete": false,
    "issues": [
      "Minimal implementation - only pass/return/ellipsis",
      "Unused method - not called anywhere in codebase"
    ],
    "docstring": "Clear all handlers.",
    "parameters": [
      "self"
    ],
    "return_annotation": "None"
  }
}