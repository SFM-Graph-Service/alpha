name: Code Quality Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  linting:
    name: Linting with Pylint and Flake8
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint flake8 flake8-docstrings flake8-import-order flake8-builtins
          pip install -r requirements.txt

      - name: Run Pylint
        run: |
          pylint core/ api/ db/ --output-format=parseable --score=yes --exit-zero > pylint-report.txt 2>&1
          cat pylint-report.txt
          
          # Extract score more reliably
          PYLINT_SCORE=$(grep -o "Your code has been rated at [0-9]*\.[0-9]*" pylint-report.txt | grep -o "[0-9]*\.[0-9]*" | head -1 || echo "0.0")
          echo "Pylint score: $PYLINT_SCORE"
          
          # Check score threshold using Python for better reliability
          python3 -c "
import sys
try:
    score = float('$PYLINT_SCORE')
    print(f'Pylint score: {score}')
    if score < 8.0:
        print('Warning: Pylint score is below 8.0')
        # Don't fail the build, just warn
    else:
        print(f'Pylint score {score} is acceptable')
except ValueError:
    print('Could not parse Pylint score, continuing...')
"

      - name: Run Flake8
        run: |
          if command -v flake8 &> /dev/null; then
            flake8 core/ api/ db/ --max-line-length=100 --exclude=__pycache__,*.pyc \
                   --ignore=E203,W503,F401 --show-source --statistics \
                   --output-file=flake8-report.txt || true
            echo "Flake8 results:" && cat flake8-report.txt
          else
            echo "Flake8 not available, skipping linting" > flake8-report.txt
          fi

      - name: Upload linting reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: linting-reports
          path: |
            pylint-report.txt
            flake8-report.txt

  type-checking:
    name: Type Checking with MyPy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mypy types-requests || echo "Warning: MyPy tools failed to install"
          pip install -r requirements.txt

      - name: Run MyPy
        run: |
          if command -v mypy &> /dev/null; then
            mypy core/ api/ db/ --ignore-missing-imports > mypy-report.txt 2>&1 || true
            cat mypy-report.txt
            
            # Count errors and warnings more reliably
            ERROR_COUNT=$(grep -c ": error:" mypy-report.txt 2>/dev/null || echo "0")
            echo "MyPy errors: $ERROR_COUNT"
            
            # Allow up to 50 errors for gradual typing adoption
            if [ "$ERROR_COUNT" -gt 50 ]; then
              echo "Warning: Many MyPy errors ($ERROR_COUNT), but continuing for gradual adoption"
            else
              echo "MyPy error count ($ERROR_COUNT) is within acceptable range"
            fi
          else
            echo "MyPy not available, skipping type checking" > mypy-report.txt
          fi

      - name: Upload type checking report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mypy-report
          path: mypy-report.txt

  formatting:
    name: Code Formatting Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort || echo "Warning: Formatting tools failed to install"

      - name: Check Black formatting
        run: |
          if command -v black &> /dev/null; then
            black --check --diff core/ api/ db/ tests/ || echo "Warning: Black formatting issues found"
          else
            echo "Black not available, skipping format check"
          fi

      - name: Check isort formatting
        run: |
          if command -v isort &> /dev/null; then
            isort --check-only --diff core/ api/ db/ tests/ || echo "Warning: isort formatting issues found"
          else
            echo "isort not available, skipping import sort check"
          fi

  pre-commit:
    name: Pre-commit Hooks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit || echo "Warning: Pre-commit failed to install"

      - name: Run pre-commit hooks
        run: |
          if command -v pre-commit &> /dev/null; then
            pre-commit run --all-files --verbose || echo "Warning: Pre-commit hooks failed"
          else
            echo "pre-commit not available, skipping pre-commit checks"
          fi