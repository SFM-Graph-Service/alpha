name: Code Quality Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  linting:
    name: Linting with Pylint and Flake8
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint flake8 flake8-docstrings flake8-import-order
          pip install -r requirements.txt

      - name: Run Pylint
        run: |
          pylint core/ api/ db/ --output-format=parseable --score=yes --exit-zero | tee pylint-report.txt
          PYLINT_SCORE=$(tail -2 pylint-report.txt | grep -o '[0-9]\+\.[0-9]\+' | head -1)
          echo "Pylint score: $PYLINT_SCORE"
          python -c "
          import sys
          score = float('$PYLINT_SCORE')
          if score < 8.0:
              print('Pylint score is below 8.0, failing build')
              sys.exit(1)
          else:
              print(f'Pylint score {score} is acceptable')
          "

      - name: Run Flake8
        run: |
          flake8 core/ api/ db/ --max-line-length=100 --exclude=__pycache__ \
                 --ignore=E203,W503 --output-file=flake8-report.txt

      - name: Upload linting reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: linting-reports
          path: |
            pylint-report.txt
            flake8-report.txt

  type-checking:
    name: Type Checking with MyPy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mypy types-requests
          pip install -r requirements.txt

      - name: Run MyPy
        run: |
          mypy core/ api/ db/ --ignore-missing-imports --output-file=mypy-report.txt || true
          cat mypy-report.txt
          
          # Count errors and warnings
          ERROR_COUNT=$(grep -c "error:" mypy-report.txt || echo "0")
          echo "MyPy errors: $ERROR_COUNT"
          
          # Allow up to 50 errors for gradual typing adoption
          if [ "$ERROR_COUNT" -gt 50 ]; then
            echo "Too many MyPy errors ($ERROR_COUNT), failing build"
            exit 1
          fi

      - name: Upload type checking report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mypy-report
          path: mypy-report.txt

  formatting:
    name: Code Formatting Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort

      - name: Check Black formatting
        run: |
          black --check --diff core/ api/ db/ tests/

      - name: Check isort formatting
        run: |
          isort --check-only --diff core/ api/ db/ tests/

  pre-commit:
    name: Pre-commit Hooks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit

      - name: Run pre-commit hooks
        run: |
          pre-commit run --all-files --verbose